[{"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\index.js":"1","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\App.js":"2","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\reportWebVitals.js":"3","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Tables.js":"4","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Home.js":"5","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\ExampleTwo.js":"6","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\OnlineSiteTable.js":"7","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Cards.js":"8","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\SiteTable.js":"9","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NotExist.js":"10","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Abnormal.js":"11","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Hdd.js":"12","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\TableRow.js":"13","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Unformatted.js":"14","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NoDisk.js":"15","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NeverOn.js":"16","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\HddNotWorking.js":"17","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Null.js":"18","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\FormattedData.js":"19","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NoDiscIdle.js":"20","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\AgingMoreThan30.js":"21","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\OfflineSiteTable.js":"22","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\DeviceHistory.js":"23","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Components\\MainLayout.js":"24","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Error.js":"25","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\CameraThree.js":"26","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\CameraOne.js":"27","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\CameraTwo.js":"28","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Login.js":"29","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\CameraFour.js":"30","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\SignUp.js":"31","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\RecNotAvailable.js":"32","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\TimeDifference.js":"33","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Utils\\Common.js":"34","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Utils\\Logout.js":"35","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\PanelHealth.js":"36","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Comfort.js":"37","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NetworkTotalSites.js":"38","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NetworkReport.js":"39","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NetworkNotWorking.js":"40","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NetworkWorking.js":"41","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\ComfortPanel.js":"42","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\LatestPanelHealthData.js":"43","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\SiteTableTwo.js":"44"},{"size":381,"mtime":1697897546951,"results":"45","hashOfConfig":"46"},{"size":5683,"mtime":1706867657286,"results":"47","hashOfConfig":"46"},{"size":375,"mtime":1697897546953,"results":"48","hashOfConfig":"46"},{"size":9752,"mtime":1699359253992,"results":"49","hashOfConfig":"46"},{"size":9177,"mtime":1701865731629,"results":"50","hashOfConfig":"46"},{"size":6677,"mtime":1699533607102,"results":"51","hashOfConfig":"46"},{"size":11740,"mtime":1698401738314,"results":"52","hashOfConfig":"46"},{"size":4521,"mtime":1698401738286,"results":"53","hashOfConfig":"46"},{"size":7539,"mtime":1700119943853,"results":"54","hashOfConfig":"46"},{"size":8602,"mtime":1698401738309,"results":"55","hashOfConfig":"46"},{"size":8599,"mtime":1698401738275,"results":"56","hashOfConfig":"46"},{"size":1581,"mtime":1698401738296,"results":"57","hashOfConfig":"46"},{"size":6357,"mtime":1699695363977,"results":"58","hashOfConfig":"46"},{"size":8616,"mtime":1698401738325,"results":"59","hashOfConfig":"46"},{"size":8592,"mtime":1698401738307,"results":"60","hashOfConfig":"46"},{"size":6322,"mtime":1698401738303,"results":"61","hashOfConfig":"46"},{"size":8858,"mtime":1698401738297,"results":"62","hashOfConfig":"46"},{"size":8456,"mtime":1698401738311,"results":"63","hashOfConfig":"46"},{"size":1707,"mtime":1697897546939,"results":"64","hashOfConfig":"46"},{"size":8614,"mtime":1698401738305,"results":"65","hashOfConfig":"46"},{"size":6260,"mtime":1699359253986,"results":"66","hashOfConfig":"46"},{"size":11762,"mtime":1698401738312,"results":"67","hashOfConfig":"46"},{"size":11832,"mtime":1706867657288,"results":"68","hashOfConfig":"46"},{"size":4428,"mtime":1702983406831,"results":"69","hashOfConfig":"46"},{"size":8587,"mtime":1698401738291,"results":"70","hashOfConfig":"46"},{"size":7489,"mtime":1698401738283,"results":"71","hashOfConfig":"46"},{"size":7469,"mtime":1698401738281,"results":"72","hashOfConfig":"46"},{"size":7483,"mtime":1698401738285,"results":"73","hashOfConfig":"46"},{"size":4820,"mtime":1699361305708,"results":"74","hashOfConfig":"46"},{"size":7486,"mtime":1698401738279,"results":"75","hashOfConfig":"46"},{"size":3566,"mtime":1698401738317,"results":"76","hashOfConfig":"46"},{"size":11303,"mtime":1698401738316,"results":"77","hashOfConfig":"46"},{"size":8935,"mtime":1698401738323,"results":"78","hashOfConfig":"46"},{"size":496,"mtime":1698401738327,"results":"79","hashOfConfig":"46"},{"size":335,"mtime":1698401738328,"results":"80","hashOfConfig":"46"},{"size":9221,"mtime":1698654456394,"results":"81","hashOfConfig":"46"},{"size":8005,"mtime":1702983312054,"results":"82","hashOfConfig":"46"},{"size":7175,"mtime":1700133035992,"results":"83","hashOfConfig":"46"},{"size":4876,"mtime":1700135305170,"results":"84","hashOfConfig":"46"},{"size":7265,"mtime":1700136229533,"results":"85","hashOfConfig":"46"},{"size":7249,"mtime":1700128653735,"results":"86","hashOfConfig":"46"},{"size":11746,"mtime":1708685305724,"results":"87","hashOfConfig":"46"},{"size":1787,"mtime":1705564788248,"results":"88","hashOfConfig":"46"},{"size":9906,"mtime":1708685305725,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},"6wjhod",{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"93"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"93"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"93"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"93"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"93"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"93"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"93"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"93"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"93"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"93"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"93"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"93"},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"93"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"93"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"93"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250"},"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\index.js",[],[],["251"],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\App.js",["252"],[],"\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useEffect } from 'react'\r\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport MainLayout from './Components/MainLayout';\r\nimport Home from './Pages/Home';\r\nimport OnlineSiteTable from './Pages/OnlineSiteTable';\r\nimport Cards from './Pages/Cards';\r\nimport Tables from './Pages/Tables';\r\nimport CameraOne from './Pages/CameraOne';\r\nimport CameraTwo from './Pages/CameraTwo';\r\nimport ComfortPanel from './Pages/ComfortPanel';\r\nimport CameraThree from './Pages/CameraThree';\r\nimport CameraFour from './Pages/CameraFour';\r\nimport ExampleTwo from './Pages/ExampleTwo';\r\nimport SiteTable from './Pages/SiteTable';\r\nimport Hdd from './Pages/Hdd';\r\nimport TableRow from './Pages/TableRow';\r\nimport NotExist from './Pages/NotExist';\r\nimport NoDisk from './Pages/NoDisk';\r\nimport NoDiscIdle from './Pages/NoDiscIdle';\r\nimport Unformatted from './Pages/Unformatted';\r\nimport Abnormal from './Pages/Abnormal';\r\nimport FormattedData from './Pages/FormattedData';\r\nimport NeverOn from './Pages/NeverOn';\r\nimport HddNotWorking from './Pages/HddNotWorking';\r\nimport AgingMoreThan30 from './Pages/AgingMoreThan30';\r\nimport Null from './Pages/Null';\r\nimport OfflineSiteTable from './Pages/OfflineSiteTable';\r\nimport DeviceHistory from './Pages/DeviceHistory';\r\nimport TimeDifference from './Pages/TimeDifference';\r\nimport Login from './Pages/Login';\r\nimport axios from 'axios';\r\nimport SignUp from './Pages/SignUp';\r\nimport { getUserId, setUserSession ,removeUserSession } from './Utils/Common';\r\nimport RecNotAvailable from './Pages/RecNotAvailable';\r\nimport Logout from './Utils/Logout';\r\nimport PanelHealth from './Pages/PanelHealth';\r\nimport Comfort from './Pages/Comfort';\r\nimport NetworkReport from './Pages/NetworkReport';\r\nimport NetworkTotalSites from './Pages/NetworkTotalSites';\r\nimport NetworkWorking from './Pages/NetworkWorking';\r\nimport NetworkNotWorking from './Pages/NetworkNotWorking';\r\nimport LatestPanelHealthData from './Pages/LatestPanelHealthData';\r\nimport SiteTableTwo from './Pages/SiteTableTwo';\r\n\r\n\r\nfunction App() {\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const id = getUserId();\r\n\r\n    if (!id) {\r\n      if (window.location.pathname !== '/SignUp') {\r\n        navigate('/');\r\n      }\r\n      return;\r\n    }\r\n\r\n    axios\r\n      .get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/verify_id`)\r\n      .then((response) => {\r\n        try {\r\n          const userDataArray = response.data;\r\n          const userData = userDataArray.find(user => user.id === id);\r\n          if (!userData || !userData.id) {\r\n            navigate('/');\r\n            return;\r\n          }\r\n          setUserSession(userData.id);\r\n\r\n        } catch (error) {\r\n          console.error('Error parsing response:', error);\r\n          navigate('/');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        removeUserSession();\r\n        console.error('Error:', error);\r\n        navigate('/');\r\n      });\r\n  }, [navigate]);\r\n\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<Login />} />\r\n      <Route path=\"/SignUp\" element={<SignUp />} />\r\n\r\n      <Route\r\n        path=\"/admin/*\"\r\n        element={getUserId() ? <MainLayout /> : <Navigate to=\"/\" />}\r\n      >\r\n        <Route index element={<Home />} />\r\n        <Route path=\"OnlineSiteTable\" element={<OnlineSiteTable />} />\r\n        <Route path=\"OfflineSiteTable\" element={<OfflineSiteTable />} />\r\n        <Route path=\"Cards\" element={<Cards />} />\r\n        <Route path=\"CameraOne\" element={<CameraOne />} />\r\n        <Route path=\"CameraTwo\" element={<CameraTwo />} />\r\n        <Route path=\"CameraThree\" element={<CameraThree />} />\r\n        <Route path=\"CameraFour\" element={<CameraFour />} />\r\n        <Route path=\"DeviceHistory/:atmId\" element={<DeviceHistory />} />\r\n        <Route path=\"Tables\" element={<Tables />} />\r\n        <Route path=\"ExampleTwo\" element={<ExampleTwo />} />\r\n        <Route path=\"ComfortPanel\" element={<ComfortPanel />} />\r\n        <Route path=\"SiteTable\" element={<SiteTable />} />\r\n        <Route path=\"Hdd\" element={<Hdd />} />\r\n        <Route path=\"TableRow\" element={<TableRow />} />\r\n        <Route path=\"NotExist\" element={<NotExist />} />\r\n        <Route path=\"NoDisk\" element={<NoDisk />} />\r\n        <Route path=\"NoDiscIdle\" element={<NoDiscIdle />} />\r\n        <Route path=\"Unformatted\" element={<Unformatted />} />\r\n        <Route path=\"Abnormal\" element={<Abnormal />} />\r\n        <Route path=\"Null\" element={<Null />} />\r\n        <Route path=\"FormattedData\" element={<FormattedData />} />\r\n        <Route path=\"NeverOn\" element={<NeverOn />} />\r\n        <Route path=\"HddNotWorking\" element={<HddNotWorking />} />\r\n        <Route path=\"AgingMoreThan30\" element={<AgingMoreThan30 />} />\r\n        <Route path=\"TimeDifference\" element={<TimeDifference />} />\r\n        <Route path=\"RecNotAvailable\" element={<RecNotAvailable />} />\r\n        <Route path=\"Logout\" element={<Logout />} />\r\n        <Route path=\"PanelHealth\" element={<PanelHealth />} />\r\n        <Route path=\"Comfort\" element={<Comfort />} />\r\n        <Route path=\"NetworkReport\" element={<NetworkReport />} />\r\n        <Route path=\"NetworkTotalSites\" element={<NetworkTotalSites />} />\r\n        <Route path=\"NetworkWorking\" element={<NetworkWorking />} />\r\n        <Route path=\"NetworkNotWorking\" element={<NetworkNotWorking />} />\r\n        <Route path=\"LatestPanelHealthData\" element={<LatestPanelHealthData />} />\r\n        <Route path=\"SiteTableTwo\" element={<SiteTableTwo />} />\r\n      </Route>\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\reportWebVitals.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Tables.js",["253"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap'\r\nimport { Card } from 'antd';\r\nimport axios from 'axios';\r\nimport { BsRouter } from 'react-icons/bs'\r\nimport { MdHttp } from 'react-icons/md'\r\nimport { BiVideoRecording } from 'react-icons/bi'\r\nimport { FaRegClock } from 'react-icons/fa'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Tables = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [count, setCount] = useState(0)\r\n    const [notAvailable,setNotAvailable]=useState(0)\r\n    const [timeDiff,setTimeDiff]=useState(0)\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/30DaysAging`)\r\n            .then(response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    setPost(response.data);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        fetch(`${process.env.REACT_APP_DVRHEALTH_API_URL}/30DaysAgingCount`)\r\n            .then(response => response.json())\r\n            .then(data => setCount(data.count))\r\n            .catch(error => console.error('Error fetching number of offline sites:', error));\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        fetch(`${process.env.REACT_APP_DVRHEALTH_API_URL}/RecNotAvailableCount`)\r\n            .then(response => response.json())\r\n            .then(data => setNotAvailable(data.recnotavailable))\r\n            .catch(error => console.error('Error fetching number of offline sites:', error));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetch(`${process.env.REACT_APP_DVRHEALTH_API_URL}/TimeDifferenceCount`)\r\n            .then(response => response.json())\r\n            .then(data => setTimeDiff(data.time_difference_count))\r\n            .catch(error => console.error('Error fetching number of offline sites:', error));\r\n    }, []);\r\n\r\n    return (\r\n        <div className='content'>\r\n            <div className='third-part'>\r\n\r\n                <Card\r\n                    style={{\r\n                        width: 620,\r\n                        height: 460,\r\n                        borderRadius: '15px',\r\n                        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n                        padding: '16px',\r\n                    }}\r\n                >\r\n                    <h6>Aging Sites more than 7 days</h6>\r\n                    <h6><span className='clr'> ( {count} )</span> Total sites</h6>\r\n                    <Table striped bordered hover className='custom-table mt-4'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Sr No</th>\r\n                                <th>ATM ID</th>\r\n                                <th>City</th>\r\n                                <th>State</th>\r\n                                <th>Zone</th>\r\n                                <th>No of Days</th>\r\n\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {post.length > 0 ? (\r\n                                post.slice(0, 5).map((users, index) => {\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td>{index + 1}</td>\r\n                                            <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '15px' }}>{users.atmid}</td>\r\n                                            <td>{users.city}</td>\r\n                                            <td>{users.state}</td>\r\n                                            <td>{users.zone}</td>\r\n                                            <td style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>{users.days_difference}</td>\r\n                                        </tr>\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <tr>\r\n                                    <td colSpan='10'>Loading...</td>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </Table>\r\n                    <div className=\"show-all-button-container\">\r\n                        <Link to=\"/admin/AgingMoreThan30\" style={{ textDecoration: 'none', display: 'block', width: '100%' }}>\r\n                            <button className=\"show-all-button\">Show All Sites</button>\r\n                        </Link>\r\n                    </div>\r\n                </Card>\r\n            </div>\r\n            <div className='forth-part'>\r\n                <div className='straight'>\r\n                    <Card\r\n                        style={{\r\n                            width: 280,\r\n                            height: 130,\r\n                            borderRadius: '15px',\r\n                            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n\r\n\r\n                        }}\r\n                    >\r\n                        <div class=\"d-flex align-items-center mt-2\">\r\n                            <div>\r\n                                <p class=\"mb-0 text-secondary\">HTTP</p>\r\n                                <h4 class=\"my-1 text-info\">69</h4>\r\n\r\n                            </div>\r\n                            <div class=\"widgets-icons-2 rounded-circle bg-gradient-ohhappiness text-white ms-auto\"><MdHttp />\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n                    <Card\r\n                        style={{\r\n                            width: 280,\r\n                            height: 130,\r\n                            borderRadius: '15px',\r\n                            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n                        }}\r\n                    >\r\n                        <div class=\"d-flex align-items-center mt-2\">\r\n                            <div>\r\n                                <p class=\"mb-0 text-secondary\">RTSP</p>\r\n                                <h4 class=\"my-1 text-info\">69</h4>\r\n                            </div>\r\n                            <div class=\"widgets-icons-2 rounded-circle bg-gradient-blooker5 text-white ms-auto\"><BiVideoRecording />\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n                    <Card\r\n                        style={{\r\n                            width: 280,\r\n                            height: 130,\r\n                            borderRadius: '15px',\r\n                            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n                        }}\r\n                    >\r\n                        <div class=\"d-flex align-items-center mt-2\">\r\n                            <div>\r\n                                <p class=\"mb-0 text-secondary\">Router</p>\r\n                                <h4 class=\"my-1 text-info\">69</h4>\r\n\r\n                            </div>\r\n                            <div class=\"widgets-icons-2 rounded-circle bg-gradient-bloody text-white ms-auto\"><BsRouter />\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n                <div className='mt-3  d-flex flex-row '>\r\n                    <Card\r\n                        style={{\r\n                            width: 430,\r\n                            height: 250,\r\n                            borderRadius: '15px',\r\n                            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n                            padding: '16px',\r\n                            backgroundImage: 'url(/camera.png)',\r\n                            backgroundSize: '100% 100%',\r\n                            backgroundRepeat: 'no-repeat',\r\n                        }}\r\n                    >\r\n                        <div class=\"d-flex align-items-center \">\r\n                            <div>\r\n                                <p class=\"mb-0 text-secondary \">Recording not available </p>\r\n                                <Link to='/admin/RecNotAvailable' style={{ textDecoration: 'none' }}><h5 class=\"my-1 neveronsi2\">{notAvailable}</h5></Link>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n                    <div className='pl-2'>\r\n                        <Card\r\n                            style={{\r\n                                width: 200,\r\n                                height: 250,\r\n                                borderRadius: '15px',\r\n                                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n                            }}\r\n                        >\r\n                            <div class=\"d-flex align-items-center mt-2\">\r\n                                <div>\r\n                                    <p class=\"mb-0 text-secondary\">Time Difference</p>\r\n                                    <Link to='/admin/TimeDIfference' style={{ textDecoration: 'none' }}>\r\n                                        <h4 class=\"my-1 text-info\">{timeDiff}</h4>\r\n                                    </Link>\r\n\r\n                                </div>\r\n                                <div class=\"widgets-icons-2 rounded-circle bg-gradient-scooter text-white ms-auto\"><FaRegClock />\r\n                                </div>\r\n                            </div>\r\n                            <div className='d-flex justify-content-center mt-2'>\r\n                                <img src=\"/images.png\" alt=\"Your Image\" width=\"180\" height=\"100\" />\r\n                            </div>\r\n                        </Card>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tables","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Home.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\ExampleTwo.js",["254","255","256","257","258","259"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst ExampleTwo = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(50);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [searchTermEntered, setSearchTermEntered] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n\r\n    const firstPost = (number - 1) * postPerPage;\r\n    const lastPost = Math.min(firstPost + postPerPage, totalCount);\r\n\r\n    useEffect(() => {\r\n        fetchAllSitesData(number, searchTermEntered);\r\n    }, [number, searchTermEntered]);\r\n\r\n    const fetchAllSitesData = (page) => {\r\n        setLoading(true);\r\n\r\n        let apiUrl = `${process.env.REACT_APP_DVRHEALTH_API_URL}/networkreporttwo?page=${page}`;\r\n\r\n        if (searchTerm) {\r\n            apiUrl += `&atmid=${searchTerm}`;\r\n        }\r\n\r\n        axios\r\n            .get(apiUrl)\r\n            .then((response) => {\r\n                console.log('API Response for Page', page, ':', response.data);\r\n                const responseData = response.data.data || [];\r\n                setPost(responseData);\r\n                setTotalCount(response.data.totalCount || 0);\r\n            })\r\n            .catch((error) => {\r\n                console.error('API Error:', error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleBackspace = (e) => {\r\n            if (e.key === 'Backspace' && searchTerm === '') {\r\n                fetchAllSitesData(number, '');\r\n            }\r\n        };\r\n        window.addEventListener('keydown', handleBackspace);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleBackspace);\r\n        };\r\n    }, [searchTerm]);\r\n\r\n    const handlePageClick = (selected) => {\r\n        const newPageNumber = selected.selected + 1;\r\n        setNumber(newPageNumber);\r\n        fetchAllSitesData(newPageNumber, searchTerm);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/ExportOnlineSites`);\r\n                setData(response.data.data);\r\n            } catch (error) {\r\n                console.error('Error fetching data from API:', error);\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const exportToExcel = () => {\r\n        const ws = XLSX.utils.json_to_sheet(data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'DVR Health Data');\r\n        XLSX.writeFile(wb, 'Online_Sites.xlsx');\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {loading && (\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader\"></div>\r\n                </div>\r\n            )}\r\n\r\n            {!loading && post.length > 0 && (\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 pt-2\">\r\n                            <h6>Network Report</h6>\r\n                            <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                                Export to Excel\r\n                            </button>\r\n\r\n                        </div>\r\n                        <div className=\"col-6 d-flex justify-content-end\">\r\n                            <div className='col-4 text-end login-form2'>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={searchTerm}\r\n                                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                                    onKeyUp={(e) => {\r\n                                        if (e.key === 'Enter') {\r\n                                            fetchAllSitesData(number, e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    placeholder='search atmid'\r\n                                    className='form-control'\r\n\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Table striped bordered hover className='custom-table mt-4'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Sr No</th>\r\n                                <th>ATM ID</th>\r\n                                    <th>Http Port</th>\r\n                                    <th>Rtsp Port</th>\r\n                                    <th>Router Port</th>\r\n                                    <th>SDK Port</th>\r\n                                    <th>AI Port</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {post.map((users, index) => (\r\n                                <tr>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '13px' }}>\r\n                                        {users.atmid}\r\n                                    </td>\r\n                                    <td>{users.http_port}</td>\r\n                                    <td>{users.router_port}</td>\r\n                                    <td>{users.rtsp_port}</td>\r\n                                    <td>{users.sdk_port}</td>\r\n                                    <td>{users.ai_port}</td>   \r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                    <ReactPaginate\r\n                        previousLabel={'<'}\r\n                        nextLabel={'>'}\r\n                        pageCount={Math.ceil(totalCount / postPerPage)}\r\n                        onPageChange={handlePageClick}\r\n                        containerClassName={'paginationBttns'}\r\n                        activeClassName={'paginationActive'}\r\n                        disableInitialCallback={true}\r\n                        initialPage={number - 1}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExampleTwo;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\OnlineSiteTable.js",["260","261","262","263"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst OnlineSiteTable = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(50);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [searchTermEntered, setSearchTermEntered] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n\r\n    const firstPost = (number - 1) * postPerPage;\r\n    const lastPost = Math.min(firstPost + postPerPage, totalCount);\r\n\r\n    useEffect(() => {\r\n        fetchAllSitesData(number, searchTermEntered);\r\n    }, [number, searchTermEntered]);\r\n\r\n    const fetchAllSitesData = (page) => {\r\n        setLoading(true);\r\n\r\n        let apiUrl = `${process.env.REACT_APP_DVRHEALTH_API_URL}/OnlineSiteDetails?page=${page}`;\r\n\r\n        if (searchTerm) {\r\n            apiUrl += `&atmid=${searchTerm}`;\r\n        }\r\n\r\n        axios\r\n            .get(apiUrl)\r\n            .then((response) => {\r\n                console.log('API Response for Page', page, ':', response.data);\r\n                const responseData = response.data.data || [];\r\n                setPost(responseData);\r\n                setTotalCount(response.data.totalCount || 0);\r\n            })\r\n            .catch((error) => {\r\n                console.error('API Error:', error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleBackspace = (e) => {\r\n            if (e.key === 'Backspace' && searchTerm === '') {\r\n                fetchAllSitesData(number, '');\r\n            }\r\n        };\r\n        window.addEventListener('keydown', handleBackspace);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleBackspace);\r\n        };\r\n    }, [searchTerm]);\r\n\r\n    const handlePageClick = (selected) => {\r\n        const newPageNumber = selected.selected + 1;\r\n        setNumber(newPageNumber);\r\n        fetchAllSitesData(newPageNumber, searchTerm);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/ExportOnlineSites`);\r\n                setData(response.data.data);\r\n            } catch (error) {\r\n                console.error('Error fetching data from API:', error);\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const exportToExcel = () => {\r\n        const ws = XLSX.utils.json_to_sheet(data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'DVR Health Data');\r\n        XLSX.writeFile(wb, 'Online_Sites.xlsx');\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {loading && (\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader\"></div>\r\n                </div>\r\n            )}\r\n\r\n            {!loading && post.length > 0 && (\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 pt-2\">\r\n                            <h6>Online Site Table</h6>\r\n                            <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                                Export to Excel\r\n                            </button>\r\n\r\n                        </div>\r\n                        <div className=\"col-6 d-flex justify-content-end\">\r\n                            <div className='col-4 text-end login-form2'>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={searchTerm}\r\n                                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                                    onKeyUp={(e) => {\r\n                                        if (e.key === 'Enter') {\r\n                                            fetchAllSitesData(number, e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    placeholder='search atmid'\r\n                                    className='form-control'\r\n\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Table striped bordered hover className='custom-table mt-4'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Sr No</th>\r\n                                <th>ATM ID</th>\r\n                                <th>\r\n                                    Up/Down\r\n                                </th>\r\n                                <th>Device Time</th>\r\n                                <th>City</th>\r\n                                <th>State</th>\r\n                                <th>Zone</th>\r\n                                <th>HDD Status</th>\r\n                                <th>Last Communication</th>\r\n                                <th>Router Ip</th>\r\n                                <th>Dvr type</th>\r\n                                <th>Camera Status</th>\r\n                                <th>Rec From</th>\r\n                                <th>Rec To</th>\r\n                                {/* <th>Gap</th> */}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {post.map((users, index) => (\r\n                                <tr>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '13px' }}>\r\n                                        {users.atmid}\r\n                                    </td>\r\n                                    <td>\r\n                                        {users.login_status === 0 ? (\r\n                                            <FiArrowUp style={{ color: 'green', fontWeight: 600, fontSize: '18px' }} />\r\n                                        ) : (\r\n                                            <FiArrowDown style={{ color: 'red', fontWeight: 600, fontSize: '18px' }} />\r\n                                        )}\r\n                                    </td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.cdate}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.city}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}> {users.state}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.zone}</td>\r\n                                    <td style={{ color: users.hdd_status === 'working' ? 'green' : 'red', fontWeight: 'bold', fontSize: '14px' }}>\r\n                                        {users.hdd_status}\r\n                                    </td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.last_communication}</td>\r\n\r\n                                    <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '13px' }}>{users.routerip}</td>\r\n                                    <td style={{ color: 'orange', fontWeight: 600, fontSize: '13px' }}>{users.dvrtype}</td>\r\n\r\n                                    <td>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '13px',\r\n                                                    height: '13px',\r\n                                                    borderRadius: \"17px\",\r\n                                                    backgroundColor: users.cam1 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"5px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '13px',\r\n                                                    height: '13px',\r\n                                                    borderRadius: \"17px\",\r\n                                                    backgroundColor: users.cam2 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"5px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '13px',\r\n                                                    height: '13px',\r\n                                                    borderRadius: \"17px\",\r\n                                                    backgroundColor: users.cam3 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"5px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '13px',\r\n                                                    height: '13px',\r\n                                                    borderRadius: \"17px\",\r\n                                                    backgroundColor: users.cam4 === 'working' ? 'green' : 'red',\r\n                                                    paddingTop: \"5px\"\r\n                                                }}\r\n                                            ></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.recording_from}</td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.recording_to}</td>\r\n                                    {/* <td style={{ color: 'Teal', fontWeight: 600, fontSize: '13px' }}>{users.time_difference_hours_minutes}</td> */}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                    <ReactPaginate\r\n                        previousLabel={'<'}\r\n                        nextLabel={'>'}\r\n                        pageCount={Math.ceil(totalCount / postPerPage)}\r\n                        onPageChange={handlePageClick}\r\n                        containerClassName={'paginationBttns'}\r\n                        activeClassName={'paginationActive'}\r\n                        disableInitialCallback={true}\r\n                        initialPage={number - 1}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OnlineSiteTable;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Cards.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\SiteTable.js",["264","265","266","267"],[],"import React, { useState, useEffect, Suspense } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport TableRow from './TableRow';\r\n\r\n\r\nconst SiteTable= () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(50);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [searchTermEntered, setSearchTermEntered] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n\r\n    const firstPost = (number - 1) * postPerPage;\r\n    const lastPost = Math.min(firstPost + postPerPage, totalCount);\r\n\r\n    useEffect(() => {\r\n        fetchAllSitesData(number, searchTermEntered);\r\n    }, [number, searchTermEntered]);\r\n\r\n    const fetchAllSitesData = (page) => {\r\n        setLoading(true);\r\n\r\n        let apiUrl = `${process.env.REACT_APP_DVRHEALTH_API_URL}/AllSitesTwodemo?page=${page}`;\r\n\r\n        if (searchTerm) {\r\n            apiUrl += `&atmid=${searchTerm}`;\r\n        }\r\n\r\n        axios\r\n            .get(apiUrl)\r\n            .then((response) => {\r\n                console.log('API Response for Page', page, ':', response.data);\r\n                const responseData = response.data.data || [];\r\n                setPost(responseData);\r\n                setTotalCount(response.data.totalCount || 0);\r\n            })\r\n            .catch((error) => {\r\n                console.error('API Error:', error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleBackspace = (e) => {\r\n            if (e.key === 'Backspace' && searchTerm === '') {\r\n                fetchAllSitesData(number, '');\r\n            }\r\n        };\r\n        window.addEventListener('keydown', handleBackspace);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleBackspace);\r\n        };\r\n    }, [searchTerm]);\r\n\r\n    const handlePageClick = (selected) => {\r\n        const newPageNumber = selected.selected + 1;\r\n        setNumber(newPageNumber);\r\n        fetchAllSitesData(newPageNumber, searchTerm);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/ExportAllSites`);\r\n                setData(response.data.data);\r\n            } catch (error) {\r\n                console.error('Error fetching data from API:', error);\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const exportToExcel = () => {\r\n        const ws = XLSX.utils.json_to_sheet(data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'DVR Health Data');\r\n        XLSX.writeFile(wb, 'SiteTable.xlsx');\r\n    };\r\n\r\n    const Fallback = () => <tr><td>Loading....</td></tr>;\r\n\r\n    return (\r\n        <div>\r\n            {loading && (\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader\">\r\n                    </div>\r\n                </div>\r\n\r\n            )}\r\n\r\n            {!loading && post.length > 0 && (\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 pt-2\">\r\n                            <h6>Site Table</h6>\r\n                            <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                                Export to Excel\r\n                            </button>\r\n\r\n                        </div>\r\n                        <div className=\"col-6 d-flex justify-content-end\">\r\n                            <div className='col-4 text-end login-form2'>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={searchTerm}\r\n                                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                                    onKeyUp={(e) => {\r\n                                        if (e.key === 'Enter') {\r\n                                            fetchAllSitesData(number, e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    placeholder='search atmid'\r\n                                    className='form-control'\r\n\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ overflowY: 'auto', scrollbarWidth: 'thin' }}>\r\n                        <Table  className='custom-tablepanel mt-4'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Sr No</th>\r\n                                    <th>ATM ID</th>\r\n                                    <th>Bank</th>\r\n                                    <th>\r\n                                        Up/Down\r\n                                    </th>\r\n                                    <th>Device Time</th>\r\n                                    <th>City</th>\r\n                                    <th>State</th>\r\n                                    <th>Zone</th>\r\n                                    <th>HDD Status</th>\r\n                                    <th>Last Communication</th>\r\n                                    <th>Router Ip</th>\r\n                                    <th>Dvr type</th>\r\n                                    <th>HTTP Port</th>\r\n                                    <th>RTSP Port</th>\r\n                                    <th>Router Port</th>\r\n                                    <th>SDK Port</th>\r\n                                    <th>AI Port</th>\r\n                                    <th>Camera Status</th>\r\n                                    <th>Rec From</th>\r\n                                    <th>Rec To</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {post.length > 0 ? (\r\n                                    post.map((user, index) => (\r\n                                        <Suspense fallback={<Fallback />} key={index}>\r\n                                            <TableRow users={user} index={index} />\r\n                                        </Suspense>))\r\n                                ) : (\r\n                                    <tr>\r\n                                        <td colSpan='12'>No data available.</td>\r\n                                    </tr>\r\n                                )}\r\n                            </tbody>\r\n                        </Table>\r\n                        <ReactPaginate\r\n                            previousLabel={'<'}\r\n                            nextLabel={'>'}\r\n                            pageCount={Math.ceil(totalCount / postPerPage)}\r\n                            onPageChange={handlePageClick}\r\n                            containerClassName={'paginationBttns'}\r\n                            activeClassName={'paginationActive'}\r\n                            disableInitialCallback={true}\r\n                            initialPage={number - 1}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SiteTable;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NotExist.js",["268"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap'\r\nimport ReactPaginate from \"react-paginate\";\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst NotExist = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(100);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const lastPost = number * postPerPage;\r\n    const firstPost = lastPost - postPerPage;\r\n\r\n    const exportToExcel = () => {\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n        const fileExtension = '.xlsx';\r\n        const fileName = 'NotExist_HDD';\r\n\r\n        const ws = XLSX.utils.json_to_sheet(filteredPosts);\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, {\r\n            bookType: 'xlsx',\r\n            type: 'array',\r\n        });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        const href = URL.createObjectURL(data);\r\n        const link = document.createElement('a');\r\n        link.href = href;\r\n        link.download = fileName + fileExtension;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    };\r\n\r\n    const filteredPosts = post\r\n        ? post.filter(post =>\r\n            post.atmid && post.atmid.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n        : [];\r\n\r\n    // const handleSearch = e => {\r\n    //     setSearchQuery(e.target.value);\r\n    // };\r\n\r\n\r\n    const currentPost = filteredPosts.slice(firstPost, lastPost);\r\n    const PageCount = Math.ceil(filteredPosts.length / postPerPage);\r\n    const ChangePage = ({ selected }) => {\r\n        setNumber(selected + 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/notexistSites`)\r\n            .then(response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    setPost(response.data);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6 pt-3\">\r\n                    <h6>HDD Status Report for <span style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>( Not Exist )</span></h6>\r\n\r\n                </div>\r\n                <div className=\"col-6 d-flex justify-content-end\">\r\n                    <div className='col-4 text-end login-form2'>\r\n                        <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                            Export to Excel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Table striped bordered hover className='custom-table mt-4'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Sr No</th>\r\n                        <th>ATM ID</th>\r\n                        <th>Up/Down</th>\r\n                        <th>Router Ip</th>\r\n                        <th>Last Communication</th>\r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Zone</th>\r\n                        <th>Camera Status</th>\r\n                        <th>Aging</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {post.length > 0 ? (\r\n                        currentPost.map((users, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '15px' }}>{users.atmid}</td>\r\n                                    <td>\r\n                                        {users.login_status === 'working' ? (\r\n                                            <FiArrowUp style={{ color: 'green', fontSize: '20px' }} />\r\n                                        ) : (\r\n                                            <FiArrowDown style={{ color: 'red', fontSize: '20px' }} />\r\n                                        )}\r\n                                    </td>\r\n                                    <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '15px' }}>{users.ip}</td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.last_communication}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.City}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.State}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.Zone}</td>\r\n                                    <td>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam1 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"3px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam2 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam3 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam4 === 'working' ? 'green' : 'red',\r\n                                                }}\r\n                                            ></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>{users.days_difference}</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan='14'>Loading...</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n            <ReactPaginate\r\n                previousLabel={\"<\"}\r\n                nextLabel={\">\"}\r\n                pageCount={PageCount}\r\n                onPageChange={ChangePage}\r\n                containerClassName={\"paginationBttns\"}\r\n                activeClassName={\"paginationActive\"}\r\n                disableInitialCallback={true}\r\n                initialPage={0}\r\n            ></ReactPaginate>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotExist","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Abnormal.js",["269"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap'\r\nimport ReactPaginate from \"react-paginate\";\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst Abnormal = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(100);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const lastPost = number * postPerPage;\r\n    const firstPost = lastPost - postPerPage;\r\n\r\n    const exportToExcel = () => {\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n        const fileExtension = '.xlsx';\r\n        const fileName = 'Abnormal_HDD';\r\n\r\n        const ws = XLSX.utils.json_to_sheet(filteredPosts);\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, {\r\n            bookType: 'xlsx',\r\n            type: 'array',\r\n        });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        const href = URL.createObjectURL(data);\r\n        const link = document.createElement('a');\r\n        link.href = href;\r\n        link.download = fileName + fileExtension;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    };\r\n\r\n    const filteredPosts = post\r\n        ? post.filter(post =>\r\n            post.atmid && post.atmid.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n        : [];\r\n\r\n    // const handleSearch = e => {\r\n    //     setSearchQuery(e.target.value);\r\n    // };\r\n\r\n\r\n    const currentPost = filteredPosts.slice(firstPost, lastPost);\r\n    const PageCount = Math.ceil(filteredPosts.length / postPerPage);\r\n    const ChangePage = ({ selected }) => {\r\n        setNumber(selected + 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/abnormalSites`)\r\n            .then(response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    setPost(response.data);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6 pt-3\">\r\n                    <h6>HDD Status Report for <span style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>( Abnormal )</span></h6>\r\n                </div>\r\n                <div className=\"col-6 d-flex justify-content-end\">\r\n                    <div className='col-4 text-end login-form2'>\r\n                        <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                            Export to Excel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Table striped bordered hover className='custom-table mt-4'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Sr No</th>\r\n                        <th>ATM ID</th>\r\n                        <th>Up/Down</th>\r\n                        <th>Router Ip</th>\r\n                        <th>Last Communication</th>\r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Zone</th>\r\n                        <th>Camera Status</th>\r\n                        <th>Aging</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {post.length > 0 ? (\r\n                        currentPost.map((users, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '15px' }}>{users.atmid}</td>\r\n                                    <td>\r\n                                        {users.login_status === 'working' ? (\r\n                                            <FiArrowUp style={{ color: 'green', fontSize: '20px' }} />\r\n                                        ) : (\r\n                                            <FiArrowDown style={{ color: 'red', fontSize: '20px' }} />\r\n                                        )}\r\n                                    </td>\r\n                                    <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '15px' }}>{users.ip}</td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.last_communication}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.City}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.State}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.Zone}</td>\r\n                                    <td>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam1 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"3px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam2 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam3 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam4 === 'working' ? 'green' : 'red',\r\n                                                }}\r\n                                            ></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>{users.days_difference}</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan='14'>Loading...</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n            <ReactPaginate\r\n                previousLabel={\"<\"}\r\n                nextLabel={\">\"}\r\n                pageCount={PageCount}\r\n                onPageChange={ChangePage}\r\n                containerClassName={\"paginationBttns\"}\r\n                activeClassName={\"paginationActive\"}\r\n                disableInitialCallback={true}\r\n                initialPage={0}\r\n            ></ReactPaginate>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Abnormal","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Hdd.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\TableRow.js",["270"],[],"import React from 'react';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\nimport { Link } from 'react-router-dom';\r\nimport { BsRouter } from 'react-icons/bs'\r\nimport { LiaInternetExplorer } from 'react-icons/lia'\r\nimport { TbSdk } from 'react-icons/tb'\r\nimport { BiSolidVideoRecording } from 'react-icons/bi'\r\nimport { FaRaspberryPi } from 'react-icons/fa'\r\nconst TableRow = ({ users, index }) => {\r\n    return (\r\n        <tr>\r\n            <td>{index + 1}</td>\r\n            <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '13px' }}>\r\n                <Link\r\n                    to={`/admin/DeviceHistory/${users.atmid}`}\r\n                    style={{\r\n                        textDecoration: 'none',\r\n                        color: 'darkblue',\r\n                        fontWeight: 'bold',\r\n                        fontSize: '15px',\r\n                    }}\r\n                >\r\n                    {users.atmid}\r\n                </Link>\r\n            </td>\r\n            <td style={{ color: 'teal', fontWeight: 600, fontSize: '13px' }}>{users.Bank}</td>\r\n            <td>\r\n                {users.login_status === 'working' ? (\r\n                    <FiArrowUp style={{ color: 'green', fontWeight: 600, fontSize: '18px' }} />\r\n                ) : (\r\n                    <FiArrowDown style={{ color: 'red', fontWeight: 600, fontSize: '18px' }} />\r\n                )}\r\n            </td>\r\n            <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.cdate}</td>\r\n            <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.City}</td>\r\n            <td style={{ fontWeight: 600, fontSize: '13px' }}> {users.State}</td>\r\n            <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.Zone}</td>\r\n            <td style={{ color: users.hdd_status === 'working' ? 'green' : 'red', fontWeight: 'bold', fontSize: '14px' }}>\r\n                {users.hdd_status}\r\n            </td>\r\n            <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.last_communication}</td>\r\n            <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '13px' }}>{users.ip}</td>\r\n            <td style={{ color: '#9C4CFF', fontWeight: 600, fontSize: '13px' }}>{users.dvrtype}</td>\r\n            <td style={{ fontWeight: 600, color: (users.http_port_status === 'Y') ? 'green' : (users.http_port_status === 'O') ? 'orange' : 'red' }}>\r\n                {users.http_port_status === 'Y' ? <LiaInternetExplorer size={22} color=\"green\" /> : (users.http_port_status === 'O') ? <LiaInternetExplorer size={22} color=\"orange\" /> : <LiaInternetExplorer size={22} color=\"red\" />}\r\n            </td>\r\n            <td style={{ fontWeight: 700, color: (users.rtsp_port_status === 'Y') ? 'green' : (users.rtsp_port_status === 'O') ? 'orange' : 'red' }}>\r\n                {users.rtsp_port_status === 'Y' ? <BiSolidVideoRecording size={20} color=\"green\" /> : (users.rtsp_port_status === 'O') ? <BiSolidVideoRecording size={20} color=\"orange\" /> : <BiSolidVideoRecording size={20} color=\"red\" />}\r\n            </td>\r\n            <td style={{ fontWeight: 700, color: (users.router_port_status === 'Y') ? 'green' : (users.router_port_status === 'O') ? 'orange' : 'red' }}>\r\n                {users.router_port_status === 'Y' ? <BsRouter size={20} color=\"green\" /> : (users.router_port_status === 'O') ? <BsRouter size={20} color=\"orange\" /> : <BsRouter size={20} color=\"red\" />}\r\n            </td>\r\n            <td style={{ fontWeight: 700, color: (users.sdk_port_status === 'Y') ? 'green' : (users.sdk_port_status === 'O') ? 'orange' : 'red' }}>\r\n                {users.sdk_port_status === 'Y' ? <TbSdk size={20} color=\"green\" /> : (users.sdk_port_status === 'O') ? <TbSdk size={20} color=\"orange\" /> : <TbSdk size={20} color=\"red\" />}\r\n            </td>\r\n            <td style={{ fontWeight: 700, color: (users.ai_port_status === 'Y') ? 'green' : (users.ai_port_status === 'O') ? 'orange' : 'red', fontWeight: 600, fontSize: '13px' }}>\r\n                {users.ai_port_status === 'Y' ? <FaRaspberryPi size={20} color=\"green\" /> : (users.ai_port_status === 'O') ? <FaRaspberryPi size={20} color=\"orange\" /> : <FaRaspberryPi size={20} color=\"red\" />}\r\n            </td>\r\n\r\n\r\n        <td>\r\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                    <div\r\n                        style={{\r\n                            width: '13px',\r\n                            height: '13px',\r\n                            borderRadius: \"17px\",\r\n                            backgroundColor: users.cam1 === 'working' ? 'green' : 'red',\r\n                            marginRight: '5px',\r\n                            paddingTop: \"5px\"\r\n                        }}\r\n                    ></div>\r\n                    <div\r\n                        style={{\r\n                            width: '13px',\r\n                            height: '13px',\r\n                            borderRadius: \"17px\",\r\n                            backgroundColor: users.cam2 === 'working' ? 'green' : 'red',\r\n                            marginRight: '5px',\r\n                            paddingTop: \"5px\"\r\n                        }}\r\n                    ></div>\r\n                    <div\r\n                        style={{\r\n                            width: '13px',\r\n                            height: '13px',\r\n                            borderRadius: \"17px\",\r\n                            backgroundColor: users.cam3 === 'working' ? 'green' : 'red',\r\n                            marginRight: '5px',\r\n                            paddingTop: \"5px\"\r\n                        }}\r\n                    ></div>\r\n                    <div\r\n                        style={{\r\n                            width: '13px',\r\n                            height: '13px',\r\n                            borderRadius: \"17px\",\r\n                            backgroundColor: users.cam4 === 'working' ? 'green' : 'red',\r\n                            paddingTop: \"5px\"\r\n                        }}\r\n                    ></div>\r\n                </div>\r\n            </td>\r\n            <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.recording_from}</td>\r\n            <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.recording_to}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default TableRow;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Unformatted.js",["271"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap'\r\nimport ReactPaginate from \"react-paginate\";\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst Unformatted = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(100);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const lastPost = number * postPerPage;\r\n    const firstPost = lastPost - postPerPage;\r\n\r\n    const exportToExcel = () => {\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n        const fileExtension = '.xlsx';\r\n        const fileName = 'Unformatted_HDD';\r\n\r\n        const ws = XLSX.utils.json_to_sheet(filteredPosts);\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, {\r\n            bookType: 'xlsx',\r\n            type: 'array',\r\n        });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        const href = URL.createObjectURL(data);\r\n        const link = document.createElement('a');\r\n        link.href = href;\r\n        link.download = fileName + fileExtension;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    };\r\n\r\n    const filteredPosts = post\r\n        ? post.filter(post =>\r\n            post.atmid && post.atmid.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n        : [];\r\n\r\n    // const handleSearch = e => {\r\n    //     setSearchQuery(e.target.value);\r\n    // };\r\n\r\n\r\n    const currentPost = filteredPosts.slice(firstPost, lastPost);\r\n    const PageCount = Math.ceil(filteredPosts.length / postPerPage);\r\n    const ChangePage = ({ selected }) => {\r\n        setNumber(selected + 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/unformattedSites`)\r\n            .then(response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    setPost(response.data);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6 pt-3\">\r\n                    <h6>HDD Status Report for <span style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>( Unformatted )</span></h6>\r\n\r\n                </div>\r\n                <div className=\"col-6 d-flex justify-content-end\">\r\n                    <div className='col-4 text-end login-form2'>\r\n                        <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                            Export to Excel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Table striped bordered hover className='custom-table mt-4'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Sr No</th>\r\n                        <th>ATM ID</th>\r\n                        <th>Up/Down</th>\r\n                        <th>Router Ip</th>\r\n                        <th>Last Communication</th>\r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Zone</th>\r\n                        <th>Camera Status</th>\r\n                        <th>Aging</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {post.length > 0 ? (\r\n                        currentPost.map((users, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '15px' }}>{users.atmid}</td>\r\n                                    <td>\r\n                                        {users.login_status === 'working' ? (\r\n                                            <FiArrowUp style={{ color: 'green', fontSize: '20px' }} />\r\n                                        ) : (\r\n                                            <FiArrowDown style={{ color: 'red', fontSize: '20px' }} />\r\n                                        )}\r\n                                    </td>\r\n                                    <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '15px' }}>{users.ip}</td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.last_communication}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.City}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.State}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.Zone}</td>\r\n                                    <td>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam1 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"3px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam2 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam3 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam4 === 'working' ? 'green' : 'red',\r\n                                                }}\r\n                                            ></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>{users.days_difference}</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan='14'>Loading...</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n            <ReactPaginate\r\n                previousLabel={\"<\"}\r\n                nextLabel={\">\"}\r\n                pageCount={PageCount}\r\n                onPageChange={ChangePage}\r\n                containerClassName={\"paginationBttns\"}\r\n                activeClassName={\"paginationActive\"}\r\n                disableInitialCallback={true}\r\n                initialPage={0}\r\n            ></ReactPaginate>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Unformatted","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NoDisk.js",["272"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap'\r\nimport ReactPaginate from \"react-paginate\";\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst NoDisk = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(100);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const lastPost = number * postPerPage;\r\n    const firstPost = lastPost - postPerPage;\r\n\r\n    const exportToExcel = () => {\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n        const fileExtension = '.xlsx';\r\n        const fileName = 'NoDisk_Hdd';\r\n\r\n        const ws = XLSX.utils.json_to_sheet(filteredPosts);\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, {\r\n            bookType: 'xlsx',\r\n            type: 'array',\r\n        });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        const href = URL.createObjectURL(data);\r\n        const link = document.createElement('a');\r\n        link.href = href;\r\n        link.download = fileName + fileExtension;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    };\r\n\r\n    const filteredPosts = post\r\n        ? post.filter(post =>\r\n            post.atmid && post.atmid.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n        : [];\r\n\r\n    // const handleSearch = e => {\r\n    //     setSearchQuery(e.target.value);\r\n    // };\r\n\r\n\r\n    const currentPost = filteredPosts.slice(firstPost, lastPost);\r\n    const PageCount = Math.ceil(filteredPosts.length / postPerPage);\r\n    const ChangePage = ({ selected }) => {\r\n        setNumber(selected + 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/NoDiskSites`)\r\n            .then(response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    setPost(response.data);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6 pt-3\">\r\n                    <h6>HDD Status Report for <span style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>( No Disk )</span></h6>\r\n\r\n                </div>\r\n                <div className=\"col-6 d-flex justify-content-end\">\r\n                    <div className='col-4 text-end login-form2'>\r\n                        <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                            Export to Excel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Table striped bordered hover className='custom-table mt-4'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Sr No</th>\r\n                        <th>ATM ID</th>\r\n                        <th>Up/Down</th>\r\n                        <th>Router Ip</th>\r\n                        <th>Last Communication</th>\r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Zone</th>\r\n                        <th>Camera Status</th>\r\n                        <th>Aging</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {post.length > 0 ? (\r\n                        currentPost.map((users, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '15px' }}>{users.atmid}</td>\r\n                                    <td>\r\n                                        {users.login_status === 'working' ? (\r\n                                            <FiArrowUp style={{ color: 'green', fontSize: '20px' }} />\r\n                                        ) : (\r\n                                            <FiArrowDown style={{ color: 'red', fontSize: '20px' }} />\r\n                                        )}\r\n                                    </td>\r\n                                    <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '15px' }}>{users.ip}</td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.last_communication}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.City}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.State}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.Zone}</td>\r\n                                    <td>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam1 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"3px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam2 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam3 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam4 === 'working' ? 'green' : 'red',\r\n                                                }}\r\n                                            ></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>{users.days_difference}</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan='14'>Loading...</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n            <ReactPaginate\r\n                previousLabel={\"<\"}\r\n                nextLabel={\">\"}\r\n                pageCount={PageCount}\r\n                onPageChange={ChangePage}\r\n                containerClassName={\"paginationBttns\"}\r\n                activeClassName={\"paginationActive\"}\r\n                disableInitialCallback={true}\r\n                initialPage={0}\r\n            ></ReactPaginate>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoDisk","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NeverOn.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\HddNotWorking.js",["273"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap'\r\nimport ReactPaginate from \"react-paginate\";\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst HddNotWorking = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(100);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const lastPost = number * postPerPage;\r\n    const firstPost = lastPost - postPerPage;\r\n\r\n    const exportToExcel = () => {\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n        const fileExtension = '.xlsx';\r\n        const fileName = 'hdd_not_working_sites';\r\n\r\n        const ws = XLSX.utils.json_to_sheet(filteredPosts);\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, {\r\n            bookType: 'xlsx',\r\n            type: 'array',\r\n        });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        const href = URL.createObjectURL(data);\r\n        const link = document.createElement('a');\r\n        link.href = href;\r\n        link.download = fileName + fileExtension;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    };\r\n\r\n    const filteredPosts = post\r\n        ? post.filter(post =>\r\n            post.atmid && post.atmid.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n        : [];\r\n\r\n    // const handleSearch = e => {\r\n    //     setSearchQuery(e.target.value);\r\n    // };\r\n\r\n\r\n    const currentPost = filteredPosts.slice(firstPost, lastPost);\r\n    const PageCount = Math.ceil(filteredPosts.length / postPerPage);\r\n    const ChangePage = ({ selected }) => {\r\n        setNumber(selected + 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/hddnotworkingsites`)\r\n            .then(response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    setPost(response.data);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6 pt-3\">\r\n                    <h6>HDD Status Report </h6>\r\n                </div>\r\n                <div className=\"col-6 d-flex justify-content-end\">\r\n                    <div className='col-4 text-end login-form2'>\r\n                        <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                            Export to Excel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Table striped bordered hover className='custom-table mt-4'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Sr No</th>\r\n                        <th>ATM ID</th>\r\n                        <th>Up/Down</th>\r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Zone</th>\r\n                        <th>Router Ip</th>\r\n                        <th>Last Communication</th>\r\n                        <th>Status</th>\r\n                        <th>Dvr Type</th>\r\n                        <th>Camera Status</th>\r\n                        <th>Aging</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {post.length > 0 ? (\r\n                        currentPost.map((users, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '15px' }}>{users.atmid}</td>\r\n                                    <td>\r\n                                        {users.login_status === 'working' ? (\r\n                                            <FiArrowUp style={{ color: 'green', fontSize: '20px' }} />\r\n                                        ) : (\r\n                                            <FiArrowDown style={{ color: 'red', fontSize: '20px' }} />\r\n                                        )}\r\n                                    </td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.city}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.state}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.zone}</td>\r\n                                    <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '15px' }}>{users.ip}</td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.last_communication}</td>\r\n                                    <td style={{ color: 'red', fontWeight: 700, fontSize: '13px' }}>{users.hdd}</td>\r\n                                    <td style={{ color: 'orange', fontWeight: 600, fontSize: '13px' }}>{users.dvrtype}</td>\r\n                                    <td>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam1 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"3px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam2 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam3 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam4 === 'working' ? 'green' : 'red',\r\n                                                }}\r\n                                            ></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>{users.days_difference}</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan='14'>Loading...</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n            <ReactPaginate\r\n                previousLabel={\"<\"}\r\n                nextLabel={\">\"}\r\n                pageCount={PageCount}\r\n                onPageChange={ChangePage}\r\n                containerClassName={\"paginationBttns\"}\r\n                activeClassName={\"paginationActive\"}\r\n                disableInitialCallback={true}\r\n                initialPage={0}\r\n            ></ReactPaginate>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HddNotWorking","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Null.js",["274"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap'\r\nimport ReactPaginate from \"react-paginate\";\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst Null = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(100);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const lastPost = number * postPerPage;\r\n    const firstPost = lastPost - postPerPage;\r\n\r\n    const exportToExcel = () => {\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n        const fileExtension = '.xlsx';\r\n        const fileName = 'Null_hdd';\r\n\r\n        const ws = XLSX.utils.json_to_sheet(filteredPosts);\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, {\r\n            bookType: 'xlsx',\r\n            type: 'array',\r\n        });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        const href = URL.createObjectURL(data);\r\n        const link = document.createElement('a');\r\n        link.href = href;\r\n        link.download = fileName + fileExtension;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    };\r\n\r\n    const filteredPosts = post\r\n        ? post.filter(post =>\r\n            post.atmid && post.atmid.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n        : [];\r\n\r\n    // const handleSearch = e => {\r\n    //     setSearchQuery(e.target.value);\r\n    // };\r\n\r\n\r\n    const currentPost = filteredPosts.slice(firstPost, lastPost);\r\n    const PageCount = Math.ceil(filteredPosts.length / postPerPage);\r\n    const ChangePage = ({ selected }) => {\r\n        setNumber(selected + 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/NullSites`)\r\n            .then(response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    setPost(response.data);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6 pt-3\">\r\n                    <h6>HDD Status Report for <span style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>( Null )</span></h6>\r\n\r\n                </div>\r\n                <div className=\"col-6 d-flex justify-content-end\">\r\n                    <div className='col-4 text-end login-form2'>\r\n                        <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                            Export to Excel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Table striped bordered hover className='custom-table mt-4'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Sr No</th>\r\n                        <th>ATM ID</th>\r\n                        <th>Up/Down</th>\r\n                        <th>Router Ip</th>\r\n                        \r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Zone</th>\r\n                        <th>Camera Status</th>\r\n                        <th>Aging</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {post.length > 0 ? (\r\n                        currentPost.map((users, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '15px' }}>{users.atmid}</td>\r\n                                    <td>\r\n                                        {users.login_status === 'working' ? (\r\n                                            <FiArrowUp style={{ color: 'green', fontSize: '20px' }} />\r\n                                        ) : (\r\n                                            <FiArrowDown style={{ color: 'red', fontSize: '20px' }} />\r\n                                        )}\r\n                                    </td>\r\n                                    <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '15px' }}>{users.ip}</td>\r\n                                    \r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.City}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.State}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.Zone}</td>\r\n                                    <td>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam1 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"3px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam2 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam3 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam4 === 'working' ? 'green' : 'red',\r\n                                                }}\r\n                                            ></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>{users.days_difference}</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan='14'>Loading...</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n            <ReactPaginate\r\n                previousLabel={\"<\"}\r\n                nextLabel={\">\"}\r\n                pageCount={PageCount}\r\n                onPageChange={ChangePage}\r\n                containerClassName={\"paginationBttns\"}\r\n                activeClassName={\"paginationActive\"}\r\n                disableInitialCallback={true}\r\n                initialPage={0}\r\n            ></ReactPaginate>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Null","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\FormattedData.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NoDiscIdle.js",["275"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap'\r\nimport ReactPaginate from \"react-paginate\";\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst NoDiscIdle = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(100);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const lastPost = number * postPerPage;\r\n    const firstPost = lastPost - postPerPage;\r\n\r\n    const exportToExcel = () => {\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n        const fileExtension = '.xlsx';\r\n        const fileName = 'NoDisk/Idle_HDD';\r\n\r\n        const ws = XLSX.utils.json_to_sheet(filteredPosts);\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, {\r\n            bookType: 'xlsx',\r\n            type: 'array',\r\n        });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        const href = URL.createObjectURL(data);\r\n        const link = document.createElement('a');\r\n        link.href = href;\r\n        link.download = fileName + fileExtension;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    };\r\n\r\n    const filteredPosts = post\r\n        ? post.filter(post =>\r\n            post.atmid && post.atmid.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n        : [];\r\n\r\n    // const handleSearch = e => {\r\n    //     setSearchQuery(e.target.value);\r\n    // };\r\n\r\n\r\n    const currentPost = filteredPosts.slice(firstPost, lastPost);\r\n    const PageCount = Math.ceil(filteredPosts.length / postPerPage);\r\n    const ChangePage = ({ selected }) => {\r\n        setNumber(selected + 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/noDiscIdleSites`)\r\n            .then(response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    setPost(response.data);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6 pt-3\">\r\n                    <h6>HDD Status Report for <span style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>( No Disk/Idle )</span></h6>\r\n\r\n                </div>\r\n                <div className=\"col-6 d-flex justify-content-end\">\r\n                    <div className='col-4 text-end login-form2'>\r\n                        <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                            Export to Excel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Table striped bordered hover className='custom-table mt-4'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Sr No</th>\r\n                        <th>ATM ID</th>\r\n                        <th>Up/Down</th>\r\n                        <th>Router Ip</th>\r\n                        <th>Last Communication</th>\r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Zone</th>\r\n                        <th>Camera Status</th>\r\n                        <th>Aging</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {post.length > 0 ? (\r\n                        currentPost.map((users, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '15px' }}>{users.atmid}</td>\r\n                                    <td>\r\n                                        {users.login_status === 'working' ? (\r\n                                            <FiArrowUp style={{ color: 'green', fontSize: '20px' }} />\r\n                                        ) : (\r\n                                            <FiArrowDown style={{ color: 'red', fontSize: '20px' }} />\r\n                                        )}\r\n                                    </td>\r\n                                    <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '15px' }}>{users.ip}</td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.last_communication}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.City}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.State}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.Zone}</td>\r\n                                    <td>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam1 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"3px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam2 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam3 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam4 === 'working' ? 'green' : 'red',\r\n                                                }}\r\n                                            ></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>{users.days_difference}</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan='14'>Loading...</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n            <ReactPaginate\r\n                previousLabel={\"<\"}\r\n                nextLabel={\">\"}\r\n                pageCount={PageCount}\r\n                onPageChange={ChangePage}\r\n                containerClassName={\"paginationBttns\"}\r\n                activeClassName={\"paginationActive\"}\r\n                disableInitialCallback={true}\r\n                initialPage={0}\r\n            ></ReactPaginate>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoDiscIdle","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\AgingMoreThan30.js",["276"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap'\r\nimport ReactPaginate from \"react-paginate\";\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst AgingMoreThan30 = () => {\r\n\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(100);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const lastPost = number * postPerPage;\r\n    const firstPost = lastPost - postPerPage;\r\n\r\n    const exportToExcel = () => {\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n        const fileExtension = '.xlsx';\r\n        const fileName = 'online_sites';\r\n\r\n        const ws = XLSX.utils.json_to_sheet(filteredPosts);\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, {\r\n            bookType: 'xlsx',\r\n            type: 'array',\r\n        });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        const href = URL.createObjectURL(data);\r\n        const link = document.createElement('a');\r\n        link.href = href;\r\n        link.download = fileName + fileExtension;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    };\r\n\r\n\r\n    const filteredPosts = post\r\n        ? post.filter(post =>\r\n            post.atmid && post.atmid.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n        : [];\r\n\r\n    // const handleSearch = e => {\r\n    //     setSearchQuery(e.target.value);\r\n    // };\r\n\r\n\r\n    const currentPost = filteredPosts.slice(firstPost, lastPost);\r\n    const PageCount = Math.ceil(filteredPosts.length / postPerPage);\r\n    const ChangePage = ({ selected }) => {\r\n        setNumber(selected + 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/30DaysAgingDetails`)\r\n            .then(response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    setPost(response.data);\r\n                    console.log(response.data)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n        >\r\n             <div className=\"row\">\r\n                <div className=\"col-6 pt-3\">\r\n                    <h6>Aging sites more than  <span style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>( 7 days )</span></h6>\r\n\r\n                </div>\r\n                <div className=\"col-6 d-flex justify-content-end\">\r\n                    <div className='col-4 text-end login-form2'>\r\n                        <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                            Export to Excel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Table striped bordered hover className='custom-table mt-4'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Sr No</th>\r\n                        <th>ATM ID</th>\r\n                        <th>Up/Down</th>\r\n                        <th>Device Time</th>\r\n                        <th>HDD Status</th>\r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Zone</th>\r\n                        <th>No of Days</th>\r\n                        {/* <th>Time Difference</th> */}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {post.length > 0 ? (\r\n                        currentPost.map((users, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '15px' }}>{users.atmid}</td>\r\n                                    <td>\r\n                                        {users.login_status === 'working' ? (\r\n                                            <FiArrowUp style={{ color: 'green', fontSize: '20px' }} />\r\n                                        ) : (\r\n                                            <FiArrowDown style={{ color: 'red', fontSize: '20px' }} />\r\n                                        )}\r\n                                    </td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.cdate}</td>\r\n                                    <td style={{ color: users.hdd_status === 'working' ? 'green' : 'red', fontWeight: 'bold', fontSize: '13px' }}>\r\n                                        {users.hdd_status}\r\n                                    </td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.city}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.state}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.zone}</td>\r\n                                    <td style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>{users.days_difference}</td>\r\n                                    {/* <td style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>{users.time_difference_hours_minutes}</td> */}\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan='10'>Loading...</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n            <ReactPaginate\r\n                previousLabel={\"<\"}\r\n                nextLabel={\">\"}\r\n                pageCount={PageCount}\r\n                onPageChange={ChangePage}\r\n                containerClassName={\"paginationBttns\"}\r\n                activeClassName={\"paginationActive\"}\r\n                disableInitialCallback={true}\r\n                initialPage={0}\r\n            ></ReactPaginate>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AgingMoreThan30","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\OfflineSiteTable.js",["277","278","279","280"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst OfflineSiteTable = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(50);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [searchTermEntered, setSearchTermEntered] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n\r\n    const firstPost = (number - 1) * postPerPage;\r\n    const lastPost = Math.min(firstPost + postPerPage, totalCount);\r\n\r\n    useEffect(() => {\r\n        fetchAllSitesData(number, searchTermEntered);\r\n    }, [number, searchTermEntered]);\r\n\r\n    const fetchAllSitesData = (page) => {\r\n        setLoading(true);\r\n\r\n        let apiUrl = `${process.env.REACT_APP_DVRHEALTH_API_URL}/OfflineSiteDetails?page=${page}`;\r\n\r\n        if (searchTerm) {\r\n            apiUrl += `&atmid=${searchTerm}`;\r\n        }\r\n\r\n        axios\r\n            .get(apiUrl)\r\n            .then((response) => {\r\n                console.log('API Response for Page', page, ':', response.data);\r\n                const responseData = response.data.data || [];\r\n                setPost(responseData);\r\n                setTotalCount(response.data.totalCount || 0);\r\n            })\r\n            .catch((error) => {\r\n                console.error('API Error:', error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleBackspace = (e) => {\r\n            if (e.key === 'Backspace' && searchTerm === '') {\r\n                fetchAllSitesData(number, '');\r\n            }\r\n        };\r\n        window.addEventListener('keydown', handleBackspace);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleBackspace);\r\n        };\r\n    }, [searchTerm]);\r\n\r\n    const handlePageClick = (selected) => {\r\n        const newPageNumber = selected.selected + 1;\r\n        setNumber(newPageNumber);\r\n        fetchAllSitesData(newPageNumber, searchTerm);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/ExportOfflineSites`);\r\n                setData(response.data.data);\r\n            } catch (error) {\r\n                console.error('Error fetching data from API:', error);\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const exportToExcel = () => {\r\n        const ws = XLSX.utils.json_to_sheet(data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'DVR Health Data');\r\n        XLSX.writeFile(wb, 'Offline_Sites.xlsx');\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {loading && (\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader\"></div>\r\n                </div>\r\n            )}\r\n\r\n            {!loading && post.length > 0 && (\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 pt-2\">\r\n                            <h6>Offline Site Table</h6>\r\n                            <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                                Export to Excel\r\n                            </button>\r\n\r\n                        </div>\r\n                        <div className=\"col-6 d-flex justify-content-end\">\r\n                            <div className='col-4 text-end login-form2'>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={searchTerm}\r\n                                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                                    onKeyUp={(e) => {\r\n                                        if (e.key === 'Enter') {\r\n                                            fetchAllSitesData(number, e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    placeholder='search atmid'\r\n                                    className='form-control'\r\n\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Table striped bordered hover className='custom-table mt-4'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Sr No</th>\r\n                                <th>ATM ID</th>\r\n                                <th>\r\n                                    Up/Down\r\n                                </th>\r\n                                <th>Device Time</th>\r\n                                <th>City</th>\r\n                                <th>State</th>\r\n                                <th>Zone</th>\r\n                                <th>HDD Status</th>\r\n                                <th>Last Communication</th>\r\n                                <th>Router Ip</th>\r\n                                <th>Dvr type</th>\r\n                                <th>Camera Status</th>\r\n                                {/* <th>Rec From</th>\r\n                                <th>Rec To</th> */}\r\n                                {/* <th>Gap</th> */}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {post.map((users, index) => (\r\n                                <tr>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '13px' }}>\r\n                                        {users.atmid}\r\n                                    </td>\r\n                                    <td>\r\n                                        {users.login_status === 0 ? (\r\n                                            <FiArrowUp style={{ color: 'green', fontWeight: 600, fontSize: '18px' }} />\r\n                                        ) : (\r\n                                            <FiArrowDown style={{ color: 'red', fontWeight: 600, fontSize: '18px' }} />\r\n                                        )}\r\n                                    </td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.cdate}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.city}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}> {users.state}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.zone}</td>\r\n                                    <td style={{ color: users.hdd_status === 'working' ? 'green' : 'red', fontWeight: 'bold', fontSize: '14px' }}>\r\n                                        {users.hdd_status}\r\n                                    </td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.last_communication}</td>\r\n\r\n                                    <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '13px' }}>{users.routerip}</td>\r\n                                    <td style={{ color: 'orange', fontWeight: 600, fontSize: '13px' }}>{users.dvrtype}</td>\r\n\r\n                                    <td>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '13px',\r\n                                                    height: '13px',\r\n                                                    borderRadius: \"17px\",\r\n                                                    backgroundColor: users.cam1 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"5px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '13px',\r\n                                                    height: '13px',\r\n                                                    borderRadius: \"17px\",\r\n                                                    backgroundColor: users.cam2 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"5px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '13px',\r\n                                                    height: '13px',\r\n                                                    borderRadius: \"17px\",\r\n                                                    backgroundColor: users.cam3 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"5px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '13px',\r\n                                                    height: '13px',\r\n                                                    borderRadius: \"17px\",\r\n                                                    backgroundColor: users.cam4 === 'working' ? 'green' : 'red',\r\n                                                    paddingTop: \"5px\"\r\n                                                }}\r\n                                            ></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    {/* <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.recording_from}</td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.recording_to}</td> */}\r\n                                    {/* <td style={{ color: 'Teal', fontWeight: 600, fontSize: '13px' }}>{users.time_difference_hours_minutes}</td> */}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                    <ReactPaginate\r\n                        previousLabel={'<'}\r\n                        nextLabel={'>'}\r\n                        pageCount={Math.ceil(totalCount / postPerPage)}\r\n                        onPageChange={handlePageClick}\r\n                        containerClassName={'paginationBttns'}\r\n                        activeClassName={'paginationActive'}\r\n                        disableInitialCallback={true}\r\n                        initialPage={number - 1}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OfflineSiteTable;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\DeviceHistory.js",["281"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi';\r\nimport { useParams } from 'react-router-dom';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n\r\nconst DeviceHistory = () => {\r\n\r\n\r\n    function formatDate(inputDate) {\r\n        // Parse the input date string\r\n        const dateObj = new Date(inputDate);\r\n\r\n        // Extract year, month, and day components\r\n        const year = dateObj.getFullYear();\r\n        const month = String(dateObj.getMonth() + 1).padStart(2, '0');\r\n        const day = String(dateObj.getDate()).padStart(2, '0');\r\n\r\n        // Format the date in the desired format\r\n        const formattedDate = `${year}-${month}-${day}`;\r\n\r\n        return formattedDate;\r\n    }\r\n\r\n\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(50);\r\n    const [loading, setLoading] = useState(true);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [data, setData] = useState([])\r\n    const { atmId } = useParams();\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n\r\n    const fetchData = (pageNumber, atmId, startDate, endDate) => {\r\n        setLoading(true);\r\n        const apiUrl = process.env.REACT_APP_DVRHEALTH_API_URL;\r\n        const postPerPage = 100;\r\n\r\n        // const formattedStartDate = startDate\r\n        //     ? startDate.toISOString().slice(0, 19).replace('T', ' ')\r\n        //     : null;\r\n\r\n        // const formattedEndDate = endDate\r\n        //     ? new Date(endDate.getTime() + 24 * 60 * 60 * 1000)\r\n        //         .toISOString()\r\n        //         .slice(0, 19)\r\n        //         .replace('T', ' ')\r\n        //     : null;\r\n\r\n        //     const formattedStartDate = startDate\r\n        //     ? new Date(startDate).toISOString().slice(0, 19).replace('T', ' ')\r\n        //     : null;\r\n\r\n        //   const formattedEndDate = endDate\r\n        //     ? new Date(endDate).toISOString().slice(0, 19).replace('T', ' ')\r\n        //     : null;\r\n\r\n        let apiUrlWithEndpoint = `${apiUrl}/devicehistoryThree/${atmId}?page=${pageNumber}&recordsPerPage=${postPerPage}`;\r\n\r\n        if (startDate && endDate) {\r\n            apiUrlWithEndpoint += `&startDate=${startDate}&endDate=${endDate}`;\r\n        }\r\n\r\n        axios\r\n            .get(apiUrlWithEndpoint)\r\n            .then((response) => {\r\n                if (response.data && response.data.data) {\r\n                    setPost(response.data.data);\r\n                    console.log(response)\r\n                    console.log(response.data.data)\r\n                    setTotalCount(response.data.totalCount);\r\n                    setLoading(false);\r\n                } else {\r\n                    console.log('No data received from API.');\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching data:', error);\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        fetchData(number, atmId, startDate, endDate);\r\n    }, [atmId, number, startDate, endDate]);\r\n\r\n    const handlePageClick = (selected) => {\r\n        const newPageNumber = selected.selected + 1;\r\n        setNumber(newPageNumber);\r\n        fetchData(newPageNumber, startDate, endDate);\r\n    };\r\n\r\n    const exportToExcel = async (atmId) => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/DeviceHistoryExport?atmId=${atmId}`);\r\n            setData(response.data.data);\r\n            generateExcelFile();\r\n        } catch (error) {\r\n            console.error('Error fetching data from API:', error);\r\n            setLoading(false);\r\n        }\r\n    };\r\n    \r\n\r\n    const generateExcelFile = () => {\r\n        const ws = XLSX.utils.json_to_sheet(data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'DVR Health Data');\r\n        XLSX.writeFile(wb, 'DeviceHistory.xlsx');\r\n        setLoading(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {loading && (\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader\"></div>\r\n                </div>\r\n            )}\r\n\r\n            {!loading && post.length > 0 && (\r\n                <div>\r\n                    <div className=\"d-flex justify-content-between align-items-center\">\r\n                        <h6 style={{ color: '#0851a6', fontWeight: '600', fontSize: '15px' }}>Device History</h6>\r\n\r\n                        <div className='date'>\r\n                            <span style={{ color: '#0851a6', fontWeight: '600', fontSize: '15px' }}>Select Date Range :</span>\r\n                            <div className=\"date-picker-container\">\r\n                                <DatePicker\r\n                                    selected={startDate}\r\n                                    onChange={(date) => setStartDate(date)}\r\n                                    placeholderText=\"Start Date\"\r\n                                    className=\"custom-date-picker\"\r\n                                />\r\n                                <DatePicker\r\n                                    selected={endDate}\r\n                                    onChange={(date) => setEndDate(date)}\r\n                                    placeholderText=\"End Date\"\r\n                                    className=\"custom-date-picker\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <button onClick={exportToExcel} className=\"btn btn-primary \">\r\n                            Export to Excel\r\n                        </button>\r\n\r\n                    </div>\r\n\r\n                    <Table striped bordered hover className=\"custom-table mt-4\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Sr No</th>\r\n                                <th>ATM ID</th>\r\n                                <th>Up/Down</th>\r\n                                <th>Device Time</th>\r\n                                <th>HDD Status</th>\r\n                                <th>Last Communication</th>\r\n                                <th>Router Ip</th>\r\n                                <th>Camera Status</th>\r\n                                <th>Rec From</th>\r\n                                <th>Rec To</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {post.map((item, index) => (\r\n                                <tr key={index}>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '15px' }}>{item.atmid}</td>\r\n                                    <td>\r\n                                        {item.login_status === \"working\" ? (\r\n                                            <FiArrowUp style={{ color: 'green', fontSize: '20px' }} />\r\n                                        ) : (\r\n                                            <FiArrowDown style={{ color: 'red', fontSize: '20px' }} />\r\n                                        )}\r\n                                    </td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{item.cdate}</td>\r\n\r\n\r\n                                    <td style={{ color: item.hdd_status === 'working' ? 'green' : 'red', fontWeight: 'bold', fontSize: '15px' }}>\r\n                                        {item.hdd_status}\r\n                                    </td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{item.last_communication}</td>\r\n                                    <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '13px' }}>{item.ip}</td>\r\n                                    <td>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: '20px',\r\n                                                    backgroundColor: item.cam1 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: '3px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: '20px',\r\n                                                    backgroundColor: item.cam2 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: '20px',\r\n                                                    backgroundColor: item.cam3 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: '20px',\r\n                                                    backgroundColor: item.cam4 === 'working' ? 'green' : 'red',\r\n                                                }}\r\n                                            ></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{item.recording_from}</td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{item.recording_to}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                    <ReactPaginate\r\n                        previousLabel={'<'}\r\n                        nextLabel={'>'}\r\n                        pageCount={Math.ceil(totalCount / postPerPage)}\r\n                        onPageChange={handlePageClick}\r\n                        containerClassName={'paginationBttns'}\r\n                        activeClassName={'paginationActive'}\r\n                        disableInitialCallback={true}\r\n                        initialPage={number - 1}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeviceHistory;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Components\\MainLayout.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Error.js",["282"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap'\r\nimport ReactPaginate from \"react-paginate\";\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst Error = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(100);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const lastPost = number * postPerPage;\r\n    const firstPost = lastPost - postPerPage;\r\n\r\n    const exportToExcel = () => {\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n        const fileExtension = '.xlsx';\r\n        const fileName = 'Error_HDD';\r\n\r\n        const ws = XLSX.utils.json_to_sheet(filteredPosts);\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, {\r\n            bookType: 'xlsx',\r\n            type: 'array',\r\n        });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        const href = URL.createObjectURL(data);\r\n        const link = document.createElement('a');\r\n        link.href = href;\r\n        link.download = fileName + fileExtension;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    };\r\n\r\n    const filteredPosts = post\r\n        ? post.filter(post =>\r\n            post.atmid && post.atmid.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n        : [];\r\n\r\n    // const handleSearch = e => {\r\n    //     setSearchQuery(e.target.value);\r\n    // };\r\n\r\n\r\n    const currentPost = filteredPosts.slice(firstPost, lastPost);\r\n    const PageCount = Math.ceil(filteredPosts.length / postPerPage);\r\n    const ChangePage = ({ selected }) => {\r\n        setNumber(selected + 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/errorSites`)\r\n            .then(response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    setPost(response.data);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6 pt-3\">\r\n                    <h6>HDD Status Report for <span style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>( Error )</span></h6>\r\n\r\n                </div>\r\n                <div className=\"col-6 d-flex justify-content-end\">\r\n                    <div className='col-4 text-end login-form2'>\r\n                        <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                            Export to Excel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Table striped bordered hover className='custom-table mt-4'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Sr No</th>\r\n                        <th>ATM ID</th>\r\n                        <th>Up/Down</th>\r\n                        <th>Router Ip</th>\r\n                        <th>Last Communication</th>\r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Zone</th>\r\n                        <th>Camera Status</th>\r\n                        <th>Aging</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {post.length > 0 ? (\r\n                        currentPost.map((users, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '15px' }}>{users.atmid}</td>\r\n                                    <td>\r\n                                        {users.login_status === 'working' ? (\r\n                                            <FiArrowUp style={{ color: 'green', fontSize: '20px' }} />\r\n                                        ) : (\r\n                                            <FiArrowDown style={{ color: 'red', fontSize: '20px' }} />\r\n                                        )}\r\n                                    </td>\r\n                                    <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '15px' }}>{users.ip}</td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.last_communication}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.City}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.State}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}> {users.Zone}</td>\r\n                                    <td>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam1 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"3px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam2 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam3 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '15px',\r\n                                                    height: '15px',\r\n                                                    borderRadius: \"20px\",\r\n                                                    backgroundColor: users.cam4 === 'working' ? 'green' : 'red',\r\n                                                }}\r\n                                            ></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ color: 'red', fontWeight: 'bold', fontSize: '15px' }}>{users.days_difference}</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan='14'>Loading...</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </Table>\r\n            <ReactPaginate\r\n                previousLabel={\"<\"}\r\n                nextLabel={\">\"}\r\n                pageCount={PageCount}\r\n                onPageChange={ChangePage}\r\n                containerClassName={\"paginationBttns\"}\r\n                activeClassName={\"paginationActive\"}\r\n                disableInitialCallback={true}\r\n                initialPage={0}\r\n            ></ReactPaginate>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\CameraThree.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\CameraOne.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\CameraTwo.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Login.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\CameraFour.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\SignUp.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\RecNotAvailable.js",["283","284","285","286"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst RecNotAvailable = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(50);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [searchTermEntered, setSearchTermEntered] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const firstPost = (number - 1) * postPerPage;\r\n    const lastPost = Math.min(firstPost + postPerPage, totalCount);\r\n\r\n    useEffect(() => {\r\n        fetchAllSitesData(number, searchTermEntered);\r\n    }, [number, searchTermEntered]);\r\n\r\n    const fetchAllSitesData = (page) => {\r\n        setLoading(true);\r\n\r\n        let apiUrl = `${process.env.REACT_APP_DVRHEALTH_API_URL}/RecNotAvailableDetails?page=${page}`;\r\n\r\n        if (searchTerm) {\r\n            apiUrl += `&atmid=${searchTerm}`;\r\n        }\r\n\r\n        axios\r\n            .get(apiUrl)\r\n            .then((response) => {\r\n                console.log('API Response for Page', page, ':', response.data);\r\n                const responseData = response.data.data || [];\r\n                setPost(responseData);\r\n                setTotalCount(response.data.totalCount || 0);\r\n            })\r\n            .catch((error) => {\r\n                console.error('API Error:', error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleBackspace = (e) => {\r\n            if (e.key === 'Backspace' && searchTerm === '') {\r\n                fetchAllSitesData(number, '');\r\n            }\r\n        };\r\n        window.addEventListener('keydown', handleBackspace);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleBackspace);\r\n        };\r\n    }, [searchTerm]);\r\n\r\n    const handlePageClick = (selected) => {\r\n        const newPageNumber = selected.selected + 1;\r\n        setNumber(newPageNumber);\r\n        fetchAllSitesData(newPageNumber, searchTerm);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/RecNotavailableExport`);\r\n                setData(response.data.data);\r\n            } catch (error) {\r\n                console.error('Error fetching data from API:', error);\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const exportToExcel = () => {\r\n        const ws = XLSX.utils.json_to_sheet(data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'DVR Health Data');\r\n        XLSX.writeFile(wb, 'RecordingNotAvailable.xlsx');\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {loading && (\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader\"></div>\r\n                </div>\r\n            )}\r\n\r\n            {!loading && post.length > 0 && (\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 pt-2\">\r\n                            <h6>Recording Not Available</h6>\r\n                            <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                                Export to Excel\r\n                            </button>\r\n\r\n                        </div>\r\n                        <div className=\"col-6 d-flex justify-content-end\">\r\n                            <div className='col-4 text-end login-form2'>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={searchTerm}\r\n                                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                                    onKeyUp={(e) => {\r\n                                        if (e.key === 'Enter') {\r\n                                            fetchAllSitesData(number, e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    placeholder='search atmid'\r\n                                    className='form-control'\r\n\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Table striped bordered hover className='custom-table mt-4'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Sr No</th>\r\n                                <th>ATM ID</th>\r\n                                <th>\r\n                                    Up/Down\r\n                                </th>\r\n                                <th>Device Time</th>\r\n                                <th>HDD Status</th>\r\n                                <th>Last Communication</th>\r\n                                <th>Router Ip</th>\r\n                                <th>Dvr type</th>\r\n                                <th>Camera Status</th>\r\n                                <th>Rec From</th>\r\n                                <th>Rec To</th>\r\n                                {/* <th>Gap</th> */}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {post.map((users, index) => (\r\n                                <tr>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '13px' }}>\r\n                                        {users.atmid}\r\n                                    </td>\r\n                                    <td>\r\n                                        {users.login_status === 0 ? (\r\n                                            <FiArrowUp style={{ color: 'green', fontWeight: 600, fontSize: '18px' }} />\r\n                                        ) : (\r\n                                            <FiArrowDown style={{ color: 'red', fontWeight: 600, fontSize: '18px' }} />\r\n                                        )}\r\n                                    </td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.cdate}</td>\r\n                                    <td style={{ color: users.hdd_status === 'working' ? 'green' : 'red', fontWeight: 'bold', fontSize: '14px' }}>\r\n                                        {users.hdd_status}\r\n                                    </td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.last_communication}</td>\r\n\r\n                                    <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '13px' }}>{users.routerip}</td>\r\n                                    <td style={{ color: 'orange', fontWeight: 600, fontSize: '13px' }}>{users.dvrtype}</td>\r\n\r\n                                    <td>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '13px',\r\n                                                    height: '13px',\r\n                                                    borderRadius: \"17px\",\r\n                                                    backgroundColor: users.cam1 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"5px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '13px',\r\n                                                    height: '13px',\r\n                                                    borderRadius: \"17px\",\r\n                                                    backgroundColor: users.cam2 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"5px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '13px',\r\n                                                    height: '13px',\r\n                                                    borderRadius: \"17px\",\r\n                                                    backgroundColor: users.cam3 === 'working' ? 'green' : 'red',\r\n                                                    marginRight: '5px',\r\n                                                    paddingTop: \"5px\"\r\n                                                }}\r\n                                            ></div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '13px',\r\n                                                    height: '13px',\r\n                                                    borderRadius: \"17px\",\r\n                                                    backgroundColor: users.cam4 === 'working' ? 'green' : 'red',\r\n                                                    paddingTop: \"5px\"\r\n                                                }}\r\n                                            ></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.recording_from}</td>\r\n                                    <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.recording_to}</td>\r\n                                    {/* <td style={{ color: 'Teal', fontWeight: 600, fontSize: '13px' }}>{users.time_difference_hours_minutes}</td> */}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                    <ReactPaginate\r\n                        previousLabel={'<'}\r\n                        nextLabel={'>'}\r\n                        pageCount={Math.ceil(totalCount / postPerPage)}\r\n                        onPageChange={handlePageClick}\r\n                        containerClassName={'paginationBttns'}\r\n                        activeClassName={'paginationActive'}\r\n                        disableInitialCallback={true}\r\n                        initialPage={number - 1}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecNotAvailable;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\TimeDifference.js",["287","288","289","290"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst TimeDifference = () => {\r\n  const [post, setPost] = useState([]);\r\n  const [number, setNumber] = useState(1);\r\n  const [postPerPage] = useState(50);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [searchTermEntered, setSearchTermEntered] = useState('');\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [data, setData] = useState(0)\r\n\r\n  const firstPost = (number - 1) * postPerPage;\r\n  const lastPost = Math.min(firstPost + postPerPage, totalCount);\r\n\r\n  useEffect(() => {\r\n    fetchAllSitesData(number, searchTermEntered);\r\n  }, [number, searchTermEntered]);\r\n\r\n  const fetchAllSitesData = (page) => {\r\n    setLoading(true);\r\n\r\n    let apiUrl = `${process.env.REACT_APP_DVRHEALTH_API_URL}/TimeDifferenceDetails?page=${page}`;\r\n\r\n    if (searchTerm) {\r\n      apiUrl += `&atmid=${searchTerm}`;\r\n    }\r\n\r\n    axios\r\n      .get(apiUrl)\r\n      .then((response) => {\r\n        console.log('API Response for Page', page, ':', response.data);\r\n        const responseData = response.data.data || [];\r\n        setPost(responseData);\r\n        setTotalCount(response.data.totalCount || 0);\r\n      })\r\n      .catch((error) => {\r\n        console.error('API Error:', error);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleBackspace = (e) => {\r\n      if (e.key === 'Backspace' && searchTerm === '') {\r\n        fetchAllSitesData(number, '');\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleBackspace);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleBackspace);\r\n    };\r\n  }, [searchTerm]);\r\n\r\n  const handlePageClick = (selected) => {\r\n    const newPageNumber = selected.selected + 1;\r\n    setNumber(newPageNumber);\r\n    fetchAllSitesData(newPageNumber, searchTerm);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/TimeDifferenceExport`);\r\n        setData(response.data.data);\r\n      } catch (error) {\r\n        console.error('Error fetching data from API:', error);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n\r\n  const exportToExcel = () => {\r\n    const ws = XLSX.utils.json_to_sheet(data);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, 'DVR Health Data');\r\n    XLSX.writeFile(wb, 'TimeDifference.xlsx');\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      {loading && (\r\n        <div className=\"loader-container\">\r\n          <div className=\"loader\"></div>\r\n        </div>\r\n      )}\r\n\r\n      {!loading && post.length > 0 && (\r\n        <div>\r\n          <div className=\"row\">\r\n            <div className=\"col-6 pt-2\">\r\n              <h6>Time Difference</h6>\r\n              <button onClick={exportToExcel} className=\"btn btn-primary mt-4\">\r\n                Export to Excel\r\n              </button>\r\n            </div>\r\n            <div className=\"col-6 d-flex justify-content-end\">\r\n              <div className='col-4 text-end login-form2'>\r\n                <input\r\n                  type=\"text\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  onKeyUp={(e) => {\r\n                    if (e.key === 'Enter') {\r\n                      fetchAllSitesData(number, e.target.value);\r\n                    }\r\n                  }}\r\n                  placeholder='search atmid'\r\n                  className='form-control'\r\n\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Table striped bordered hover className='custom-table mt-4'>\r\n            <thead>\r\n              <tr>\r\n                <th>Sr No</th>\r\n                <th>ATM ID</th>\r\n                <th>\r\n                  Up/Down\r\n                </th>\r\n                <th>Device Time</th>\r\n                <th>City</th>\r\n                <th>State</th>\r\n                <th>Zone</th>\r\n                <th>HDD Status</th>\r\n                <th>Last Communication</th>\r\n                <th>Router Ip</th>\r\n                <th>Dvr type</th>\r\n                <th>Camera Status</th>\r\n                <th>Rec From</th>\r\n                <th>Rec To</th>\r\n                <th>Gap</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {post.map((users, index) => (\r\n                <tr>\r\n                  <td>{index + 1}</td>\r\n                  <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '13px' }}>\r\n                    {users.atmid}\r\n                  </td>\r\n                  <td>\r\n                    {users.login_status === 0 ? (\r\n                      <FiArrowUp style={{ color: 'green', fontWeight: 600, fontSize: '18px' }} />\r\n                    ) : (\r\n                      <FiArrowDown style={{ color: 'red', fontWeight: 600, fontSize: '18px' }} />\r\n                    )}\r\n                  </td>\r\n                  <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.cdate}</td>\r\n                  <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.city}</td>\r\n                  <td style={{ fontWeight: 600, fontSize: '13px' }}> {users.state}</td>\r\n                  <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.zone}</td>\r\n                  <td style={{ color: users.hdd_status === 'working' ? 'green' : 'red', fontWeight: 'bold', fontSize: '14px' }}>\r\n                    {users.hdd_status}\r\n                  </td>\r\n                  <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.last_communication}</td>\r\n\r\n                  <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '13px' }}>{users.routerip}</td>\r\n                  <td style={{ color: 'orange', fontWeight: 600, fontSize: '13px' }}>{users.dvrtype}</td>\r\n\r\n                  <td>\r\n                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                      <div\r\n                        style={{\r\n                          width: '13px',\r\n                          height: '13px',\r\n                          borderRadius: \"17px\",\r\n                          backgroundColor: users.cam1 === 'working' ? 'green' : 'red',\r\n                          marginRight: '5px',\r\n                          paddingTop: \"5px\"\r\n                        }}\r\n                      ></div>\r\n                      <div\r\n                        style={{\r\n                          width: '13px',\r\n                          height: '13px',\r\n                          borderRadius: \"17px\",\r\n                          backgroundColor: users.cam2 === 'working' ? 'green' : 'red',\r\n                          marginRight: '5px',\r\n                          paddingTop: \"5px\"\r\n                        }}\r\n                      ></div>\r\n                      <div\r\n                        style={{\r\n                          width: '13px',\r\n                          height: '13px',\r\n                          borderRadius: \"17px\",\r\n                          backgroundColor: users.cam3 === 'working' ? 'green' : 'red',\r\n                          marginRight: '5px',\r\n                          paddingTop: \"5px\"\r\n                        }}\r\n                      ></div>\r\n                      <div\r\n                        style={{\r\n                          width: '13px',\r\n                          height: '13px',\r\n                          borderRadius: \"17px\",\r\n                          backgroundColor: users.cam4 === 'working' ? 'green' : 'red',\r\n                          paddingTop: \"5px\"\r\n                        }}\r\n                      ></div>\r\n                    </div>\r\n                  </td>\r\n                  <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.recording_from}</td>\r\n                  <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.recording_to}</td>\r\n                  <td style={{ color: 'Teal', fontWeight: 600, fontSize: '13px' }}>{users.time_difference_hours_minutes}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n          <ReactPaginate\r\n            previousLabel={'<'}\r\n            nextLabel={'>'}\r\n            pageCount={Math.ceil(totalCount / postPerPage)}\r\n            onPageChange={handlePageClick}\r\n            containerClassName={'paginationBttns'}\r\n            activeClassName={'paginationActive'}\r\n            disableInitialCallback={true}\r\n            initialPage={number - 1}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeDifference;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Utils\\Common.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Utils\\Logout.js",[],[],"C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\PanelHealth.js",["291","292","293","294","295","296"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\n\r\n\r\nconst PanelHealth = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(50);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [searchTermEntered, setSearchTermEntered] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n\r\n    const firstPost = (number - 1) * postPerPage;\r\n    const lastPost = Math.min(firstPost + postPerPage, totalCount);\r\n\r\n    useEffect(() => {\r\n        fetchAllSitesData(number, searchTermEntered);\r\n    }, [number, searchTermEntered]);\r\n\r\n    const fetchAllSitesData = (page) => {\r\n        setLoading(true);\r\n\r\n        let apiUrl = `${process.env.REACT_APP_DVRHEALTH_API_URL}/PanelHealthDetails?page=${page}`;\r\n\r\n        if (searchTerm) {\r\n            apiUrl += `&atmid=${searchTerm}`;\r\n        }\r\n\r\n        axios\r\n            .get(apiUrl)\r\n            .then((response) => {\r\n                console.log('API Response for Page', page, ':', response.data);\r\n                const responseData = response.data.data || [];\r\n                setPost(responseData);\r\n                setTotalCount(response.data.totalCount || 0);\r\n            })\r\n            .catch((error) => {\r\n                console.error('API Error:', error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleBackspace = (e) => {\r\n            if (e.key === 'Backspace' && searchTerm === '') {\r\n                fetchAllSitesData(number, '');\r\n            }\r\n        };\r\n        window.addEventListener('keydown', handleBackspace);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleBackspace);\r\n        };\r\n    }, [searchTerm]);\r\n\r\n    const handlePageClick = (selected) => {\r\n        const newPageNumber = selected.selected + 1;\r\n        setNumber(newPageNumber);\r\n        fetchAllSitesData(newPageNumber, searchTerm);\r\n    };\r\n\r\n\r\n    // useEffect(() => {\r\n    //     const fetchData = async () => {\r\n    //         setLoading(true);\r\n    //         try {\r\n    //             const response = await axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/ExportOfflineSites`);\r\n    //             setData(response.data.data);\r\n    //         } catch (error) {\r\n    //             console.error('Error fetching data from API:', error);\r\n    //         }\r\n    //         setLoading(false);\r\n    //     };\r\n\r\n    //     fetchData();\r\n    // }, []);\r\n\r\n    \r\n    const exportToExcel = () => {\r\n        const ws = XLSX.utils.json_to_sheet(data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'DVR Health Data');\r\n        XLSX.writeFile(wb, 'Offline_Sites.xlsx');\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className=\"row\">\r\n                        <div className=\"col-6 pt-2\">\r\n                            <h6>Panel Health</h6>\r\n                            <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                                Export to Excel\r\n                            </button>\r\n\r\n                        </div>\r\n                        <div className=\"col-6 d-flex justify-content-end\">\r\n                            <div className='col-4 text-end login-form2'>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={searchTerm}\r\n                                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                                    onKeyUp={(e) => {\r\n                                        if (e.key === 'Enter') {\r\n                                            fetchAllSitesData(number, e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    placeholder='search atmid'\r\n                                    className='form-control'\r\n\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                <div style={{  overflowY: 'auto',scrollbarWidth: 'thin' }}>\r\n                    <Table striped bordered hover className='custom-tablepanel mt-4'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Sr No</th>\r\n                                <th>ATM ID</th>\r\n                                <th>\r\n                                    Customer\r\n                                </th>\r\n                                <th>State</th>\r\n                                <th>City</th>\r\n                                <th>Bank</th>\r\n                                <th>Panel Ip</th>\r\n                                <th>Panel Name</th>\r\n                                <th>Date Time</th>\r\n                                <th>Lobby Pr Motion Sensor</th>\r\n                                <th>Glass Break Senson</th>\r\n                                <th>Panic Switch</th>\r\n                                <th>Main Door shutt Normal No type</th>\r\n                                <th>ATM Removal</th>\r\n                                <th>ATM 1 Vibration</th>\r\n                                <th>Smoke Detector 12V IN+</th>\r\n                                <th>VideoLoss/VideoTemper/HDD Alarm</th>\r\n                                <th>ATM 1 Thermar/Heat</th>\r\n                                <th>ATM 2 Thermar/Heat</th>\r\n                                <th>Chest Door Open ATM 1</th>\r\n                                <th>Chest Door Open ATM 2</th>\r\n                                <th>Chest Door Open ATM 3</th>\r\n                                <th>Ac/UPS Removal</th>\r\n                                <th>Cheque DropBox Removal</th>\r\n                                <th>CCTV 1+2+3 Removal</th>\r\n                                <th>ATM 3 Thermal HeaT</th>\r\n                                <th>Backroom Door Open</th>\r\n                                <th>Lobby Temprature Sensor High</th>\r\n                                <th>ATM 1/2 HoodDoor Senson</th>\r\n                                <th>Lobby Temprature Sensor Low</th>\r\n                                <th>Silence Key</th>\r\n                                <th>AC Mains Fail</th>\r\n                                <th>Ups O/P Fail</th>\r\n                                <th>Panel Temper Switch</th>\r\n                                <th>Low Battery</th>\r\n                                <th>No Battery</th>\r\n                                <th>Fire Trouble Smoke sensor</th>\r\n                                <th>Current Status</th>\r\n                                <th>Site Address</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {post.map((users, index) => (\r\n                                <tr>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '13px' }}>\r\n                                        {users.atmid}\r\n                                    </td>\r\n                                    <td>{users.customer}</td>\r\n                                    <td>{users.state}</td>\r\n                                    <td>{users.zone}</td>\r\n                                    <td>{users.Bank}</td>\r\n                                    <td>{users.ip}</td>\r\n                                    <td>{users.panelName}</td>\r\n                                    <td>{users.date}</td>\r\n                                    <td>{users.Bank}</td>\r\n                                    <td>{users.Bank}</td>\r\n                                    <td>{users.Bank}</td>\r\n                                    <td>{users.Bank}</td>\r\n                                    <td>{users.Bank}</td>\r\n                                    <td>{users.Bank}</td>\r\n                                    <td>{users.Bank}</td>\r\n                                    <td>{users.Bank}</td>\r\n                                    <td>{users.Bank}</td>\r\n                                    \r\n                                   \r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                    <ReactPaginate\r\n                        previousLabel={'<'}\r\n                        nextLabel={'>'}\r\n                        pageCount={Math.ceil(totalCount / postPerPage)}\r\n                        onPageChange={handlePageClick}\r\n                        containerClassName={'paginationBttns'}\r\n                        activeClassName={'paginationActive'}\r\n                        disableInitialCallback={true}\r\n                        initialPage={number - 1}\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PanelHealth;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\Comfort.js",["297","298","299","300"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\n\r\n\r\nconst Comfort = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(50);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [searchTermEntered, setSearchTermEntered] = useState('');\r\n    const [data, setData] = useState([])\r\n    const [loading, setLoading] = useState(true);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n\r\n    const firstPost = (number - 1) * postPerPage;\r\n    const lastPost = Math.min(firstPost + postPerPage, totalCount);\r\n\r\n    useEffect(() => {\r\n        fetchAllSitesData(number, searchTermEntered);\r\n    }, [number, searchTermEntered]);\r\n\r\n    const fetchAllSitesData = (page) => {\r\n        setLoading(true);\r\n\r\n        let apiUrl = `${process.env.REACT_APP_DVRHEALTH_API_URL}/PanelHealthDetailsapid?page=${page}`;\r\n\r\n        if (searchTerm) {\r\n            apiUrl += `&atmid=${searchTerm}`;\r\n        }\r\n\r\n\r\n        axios\r\n            .get(apiUrl)\r\n            .then((response) => {\r\n                console.log('API Response for Page', page, ':', response.data);\r\n                const responseData = response.data.data || [];\r\n                setPost(responseData);\r\n                console.log(responseData)\r\n                setTotalCount(response.data.totalCount || 0);\r\n            })\r\n            .catch((error) => {\r\n                console.error('API Error:', error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleBackspace = (e) => {\r\n            if (e.key === 'Backspace' && searchTerm === '') {\r\n                fetchAllSitesData(number, '');\r\n            }\r\n        };\r\n        window.addEventListener('keydown', handleBackspace);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleBackspace);\r\n        };\r\n    }, [searchTerm]);\r\n\r\n    const handlePageClick = (selected) => {\r\n        const newPageNumber = selected.selected + 1;\r\n        setNumber(newPageNumber);\r\n        fetchAllSitesData(newPageNumber, searchTerm);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/ExportPanelHealthDetails`);\r\n                setData(response.data.data);\r\n            } catch (error) {\r\n                console.error('Error fetching data from API:', error);\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const exportToExcel = () => {\r\n        const ws = XLSX.utils.json_to_sheet(data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'DVR Health Data');\r\n        XLSX.writeFile(wb, 'Online_Sites.xlsx');\r\n    };\r\n\r\n    const getZoneStatus = (zone) => {\r\n        let statusText = \"\";\r\n        let statusColor = \"\";\r\n    \r\n        switch (zone.armed) {\r\n            case 1:\r\n                statusText = \"Open\";\r\n                statusColor = \"green\";\r\n                break;\r\n            case 0:\r\n                statusText = \"Bypassed\";\r\n                statusColor = \"red\"; \r\n                break;\r\n            default:\r\n                statusText = \"Unknown\";\r\n                break;\r\n        }\r\n    \r\n        return <span style={{ color: statusColor }}>{statusText}</span>;\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {loading && (\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader\"></div>\r\n                </div>\r\n            )}\r\n            {!loading && post.length > 0 && (\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 pt-2\">\r\n                            <h6>Comfort Panel</h6>\r\n                            <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                                Export to Excel\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"col-6 d-flex justify-content-end\">\r\n                            <div className='col-4 text-end login-form2'>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={searchTerm}\r\n                                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                                    onKeyUp={(e) => {\r\n                                        if (e.key === 'Enter') {\r\n                                            fetchAllSitesData(number, e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    placeholder='search atmid'\r\n                                    className='form-control'\r\n\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ overflowY: 'auto', scrollbarWidth: 'thin' }}>\r\n                        <Table className='custom-tablepanel mt-4'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Sr No</th>\r\n                                    <th>ATM ID</th>\r\n                                    <th>Panel Name</th>\r\n                                    {post.length > 0 && Array.isArray(post[0].zone_config) ? (\r\n                                        post[0].zone_config.map((zone, zoneIndex) => (\r\n                                            <th key={zoneIndex}>{zone.zone_name}</th>\r\n                                        ))\r\n                                    ) : (\r\n                                        <th>No Zone Data</th>\r\n                                    )}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {post.map((users, index) => (\r\n                                    <tr key={index}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '13px' }}>\r\n                                            {users.atmid}\r\n                                        </td>\r\n                                        <td style={{ color: 'orange', fontWeight: 'bold', fontSize: '13px' }}>{users.panel_name}</td>\r\n                                        {users.zone_config && Array.isArray(users.zone_config) ? (\r\n                                            users.zone_config.map((zone, zoneIndex) => (\r\n                                                <td key={zoneIndex}>{getZoneStatus(zone)}</td>\r\n                                            ))\r\n                                        ) : (\r\n                                            <td>No Zone Data</td>\r\n                                        )}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n\r\n                        <ReactPaginate\r\n                            previousLabel={'<'}\r\n                            nextLabel={'>'}\r\n                            pageCount={Math.ceil(totalCount / postPerPage)}\r\n                            onPageChange={handlePageClick}\r\n                            containerClassName={'paginationBttns'}\r\n                            activeClassName={'paginationActive'}\r\n                            disableInitialCallback={true}\r\n                            initialPage={number - 1}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comfort;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NetworkTotalSites.js",["301","302","303","304"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\n\r\n\r\nconst NetworkTotalSites = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(50);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [searchTermEntered, setSearchTermEntered] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n\r\n    const firstPost = (number - 1) * postPerPage;\r\n    const lastPost = Math.min(firstPost + postPerPage, totalCount);\r\n\r\n    useEffect(() => {\r\n        fetchAllSitesData(number, searchTermEntered);\r\n    }, [number, searchTermEntered]);\r\n\r\n    const fetchAllSitesData = (page) => {\r\n        setLoading(true);\r\n\r\n        let apiUrl = `${process.env.REACT_APP_DVRHEALTH_API_URL}/networkreporttwo?page=${page}`;\r\n\r\n        if (searchTerm) {\r\n            apiUrl += `&ATMID=${searchTerm}`;\r\n        }\r\n\r\n        axios\r\n            .get(apiUrl)\r\n            .then((response) => {\r\n                console.log('API Response for Page', page, ':', response.data);\r\n                const responseData = response.data.data || [];\r\n                setPost(responseData);\r\n                setTotalCount(response.data.totalCount || 0);\r\n            })\r\n            .catch((error) => {\r\n                console.error('API Error:', error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleBackspace = (e) => {\r\n            if (e.key === 'Backspace' && searchTerm === '') {\r\n                fetchAllSitesData(number, '');\r\n            }\r\n        };\r\n        window.addEventListener('keydown', handleBackspace);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleBackspace);\r\n        };\r\n    }, [searchTerm]);\r\n\r\n    const handlePageClick = (selected) => {\r\n        const newPageNumber = selected.selected + 1;\r\n        setNumber(newPageNumber);\r\n        fetchAllSitesData(newPageNumber, searchTerm);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/ExportNetworkReport`);\r\n                setData(response.data.data);\r\n            } catch (error) {\r\n                console.error('Error fetching data from API:', error);\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const exportToExcel = () => {\r\n        const ws = XLSX.utils.json_to_sheet(data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'DVR Health Data');\r\n        XLSX.writeFile(wb, 'NetWorkReport.xlsx');\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {loading && (\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader\"></div>\r\n                </div>\r\n            )}\r\n\r\n            {!loading && post.length > 0 && (\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 pt-2\">\r\n                            <h6>Network Report</h6>\r\n                            <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                                Export to Excel\r\n                            </button>\r\n\r\n                        </div>\r\n                        <div className=\"col-6 d-flex justify-content-end\">\r\n                            <div className='col-4 text-end login-form2'>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={searchTerm}\r\n                                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                                    onKeyUp={(e) => {\r\n                                        if (e.key === 'Enter') {\r\n                                            fetchAllSitesData(number, e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    placeholder='search atmid'\r\n                                    className='form-control'\r\n\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Table striped bordered hover className='custom-table mt-4'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Sr No</th>\r\n                                <th>ATM ID</th>\r\n                                <th>Bank</th>\r\n                                <th>Rec Time</th>\r\n                                <th>Http Port</th>\r\n                                <th>Rtsp Port</th>\r\n                                <th>Router Port</th>\r\n                                <th>SDK Port</th>\r\n                                <th>AI Port</th>\r\n\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {post.map((users, index) => (\r\n                                <tr>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '13px' }}>\r\n                                        {users.ATMID}\r\n                                    </td>\r\n                                    <td style={{ color: 'teal', fontWeight: 600, fontSize: '13px' }}>{users.Bank}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.rectime}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.http_port}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}> {users.rtsp_port}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.router_port}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.sdk_port}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.ai_port}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                    <ReactPaginate\r\n                        previousLabel={'<'}\r\n                        nextLabel={'>'}\r\n                        pageCount={Math.ceil(totalCount / postPerPage)}\r\n                        onPageChange={handlePageClick}\r\n                        containerClassName={'paginationBttns'}\r\n                        activeClassName={'paginationActive'}\r\n                        disableInitialCallback={true}\r\n                        initialPage={number - 1}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NetworkTotalSites;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NetworkReport.js",["305"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { BiWifiOff } from 'react-icons/bi'\r\nimport { FaWifi } from 'react-icons/fa'\r\nimport { GiNetworkBars } from 'react-icons/gi'\r\nimport { Card } from 'antd';\r\n\r\nconst NetworkReport = () => {\r\n    const [totalSites, setTotalSites] = useState(0)\r\n    const [networkWorking, setNetworkWorking] = useState(0)\r\n    const [networNotkWorking, setNetworkNotWorking] = useState(0)\r\n\r\n    useEffect(() => {\r\n        fetch(`${process.env.REACT_APP_DVRHEALTH_API_URL}/NetworkReportTotalSites`)\r\n            .then(response => response.json())\r\n            .then(data => setTotalSites(data.distinct_atmid_count))\r\n            .catch(error => console.error('Error fetching number of offline sites:', error));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetch(`${process.env.REACT_APP_DVRHEALTH_API_URL}/NetworkReportWorkingCount`)\r\n            .then(response => response.json())\r\n            .then(data => setNetworkWorking(data.working_count_records))\r\n            .catch(error => console.error('Error fetching number of offline sites:', error));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetch(`${process.env.REACT_APP_DVRHEALTH_API_URL}/NetworkReportNotWorkingCount`)\r\n            .then(response => response.json())\r\n            .then(data => setNetworkNotWorking(data.notworking_records))\r\n            .catch(error => console.error('Error fetching number of offline sites:', error));\r\n    }, []);\r\n    {console.log(networNotkWorking)}\r\n\r\n    return (\r\n        <div>\r\n            <div className='network' style={{ backgroundImage: \"url('/network.jpg')\", backgroundSize: 'cover', backgroundPosition: 'center', height: '400px', width: '100%' }}>\r\n                <div className='main-network'>\r\n                    <Card\r\n                        style={{\r\n                            width: 330,\r\n                            height: 130,\r\n                            borderRadius: '15px',\r\n                            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n                        }}\r\n                    >\r\n                        <div class=\"d-flex align-items-center mt-2\">\r\n                            <div>\r\n                                <p class=\"mb-0 text-secondary\">Total Sites</p>\r\n                                <Link to='/admin/NetworkTotalSites' style={{ textDecoration: 'none' }}> <h4 class=\"my-1 text-info\">{totalSites}</h4></Link>\r\n                            </div>\r\n                            <div class=\"widgets-icons-2 rounded-circle bg-gradient-blooker5 text-white ms-auto\"><GiNetworkBars />\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n                    <div className='networkp2'>\r\n                        <Card\r\n                            style={{\r\n                                width: 330,\r\n                                height: 130,\r\n                                borderRadius: '15px',\r\n                                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n                            }}\r\n                        >\r\n                            <div class=\"d-flex align-items-center mt-2\">\r\n                                <div>\r\n                                    <p class=\"mb-0 text-secondary\">Working</p>\r\n                                    <Link to='/admin/NetworkWorking' style={{ textDecoration: 'none' }}> <h4 class=\"my-1 text-info\">{networkWorking}</h4></Link>\r\n                                </div>\r\n                                <div class=\"widgets-icons-2 rounded-circle bg-gradient-blooker5 text-white ms-auto\"><FaWifi/>\r\n                                </div>\r\n                            </div>\r\n                        </Card>\r\n                        <Card\r\n                            style={{\r\n                                width: 330,\r\n                                height: 130,\r\n                                borderRadius: '15px',\r\n                                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n                            }}\r\n                        >\r\n                            <div class=\"d-flex align-items-center mt-2\">\r\n                                <div>\r\n                                    <p class=\"mb-0 text-secondary\">Not Working</p>\r\n                                    <Link to='/admin/NetworkNotWorking' style={{ textDecoration: 'none' }}> <h4 class=\"my-1 text-info\">{networNotkWorking}</h4></Link>\r\n                                </div>\r\n                                <div class=\"widgets-icons-2 rounded-circle bg-gradient-blooker5 text-white ms-auto\"><BiWifiOff  />\r\n                                </div>\r\n                            </div>\r\n                        </Card>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NetworkReport","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NetworkNotWorking.js",["306","307","308","309","310","311"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\n\r\nconst NetworkNotWorking = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(50);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [searchTermEntered, setSearchTermEntered] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n\r\n    const firstPost = (number - 1) * postPerPage;\r\n    const lastPost = Math.min(firstPost + postPerPage, totalCount);\r\n\r\n    useEffect(() => {\r\n        fetchAllSitesData(number, searchTermEntered);\r\n    }, [number, searchTermEntered]);\r\n\r\n    const fetchAllSitesData = (page) => {\r\n        setLoading(true);\r\n\r\n        let apiUrl = `${process.env.REACT_APP_DVRHEALTH_API_URL}/networkreportnotworking?page=${page}`;\r\n\r\n        if (searchTerm) {\r\n            apiUrl += `&ATMID=${searchTerm}`;\r\n        }\r\n\r\n        axios\r\n            .get(apiUrl)\r\n            .then((response) => {\r\n                console.log('API Response for Page', page, ':', response.data);\r\n                const responseData = response.data.data || [];\r\n                setPost(responseData);\r\n                console.log(post)\r\n                setTotalCount(response.data.totalCount || 0);\r\n            })\r\n            .catch((error) => {\r\n                console.error('API Error:', error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleBackspace = (e) => {\r\n            if (e.key === 'Backspace' && searchTerm === '') {\r\n                fetchAllSitesData(number, '');\r\n            }\r\n        };\r\n        window.addEventListener('keydown', handleBackspace);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleBackspace);\r\n        };\r\n    }, [searchTerm]);\r\n\r\n    const handlePageClick = (selected) => {\r\n        const newPageNumber = selected.selected + 1;\r\n        setNumber(newPageNumber);\r\n        fetchAllSitesData(newPageNumber, searchTerm);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/ExportOnlineSites`);\r\n                setData(response.data.data);\r\n            } catch (error) {\r\n                console.error('Error fetching data from API:', error);\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const exportToExcel = () => {\r\n        const ws = XLSX.utils.json_to_sheet(data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'DVR Health Data');\r\n        XLSX.writeFile(wb, 'Online_Sites.xlsx');\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {loading && (\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader\"></div>\r\n                </div>\r\n            )}\r\n\r\n            {!loading && post.length > 0 && (\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 pt-2\">\r\n                            <h6>Network Report</h6>\r\n                            <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                                Export to Excel\r\n                            </button>\r\n\r\n                        </div>\r\n                        <div className=\"col-6 d-flex justify-content-end\">\r\n                            <div className='col-4 text-end login-form2'>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={searchTerm}\r\n                                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                                    onKeyUp={(e) => {\r\n                                        if (e.key === 'Enter') {\r\n                                            fetchAllSitesData(number, e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    placeholder='search atmid'\r\n                                    className='form-control'\r\n\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Table striped bordered hover className='custom-table mt-4'>\r\n                        <thead>\r\n                            <tr>\r\n                            <th>Sr No</th>\r\n                                <th>ATM ID</th>\r\n                                <th>Bank</th>\r\n                                <th>Rec Time</th>\r\n                                <th>Http Port</th>\r\n                                <th>Rtsp Port</th>\r\n                                <th>Router Port</th>\r\n                                <th>SDK Port</th>\r\n                                <th>AI Port</th>\r\n\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {post.map((users, index) => (\r\n                                <tr>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '13px' }}>\r\n                                        {users.ATMID}\r\n                                    </td>\r\n                                    <td style={{ color: 'teal', fontWeight: 600, fontSize: '13px' }}>{users.Bank}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.rectime}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.http_port}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}> {users.rtsp_port}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.router_port}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.sdk_port}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.ai_port}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                    <ReactPaginate\r\n                        previousLabel={'<'}\r\n                        nextLabel={'>'}\r\n                        pageCount={Math.ceil(totalCount / postPerPage)}\r\n                        onPageChange={handlePageClick}\r\n                        containerClassName={'paginationBttns'}\r\n                        activeClassName={'paginationActive'}\r\n                        disableInitialCallback={true}\r\n                        initialPage={number - 1}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NetworkNotWorking;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\NetworkWorking.js",["312","313","314","315"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\n\r\n\r\nconst NetworkWorking = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(50);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [searchTermEntered, setSearchTermEntered] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n\r\n    const firstPost = (number - 1) * postPerPage;\r\n    const lastPost = Math.min(firstPost + postPerPage, totalCount);\r\n\r\n    useEffect(() => {\r\n        fetchAllSitesData(number, searchTermEntered);\r\n    }, [number, searchTermEntered]);\r\n\r\n    const fetchAllSitesData = (page) => {\r\n        setLoading(true);\r\n\r\n        let apiUrl = `${process.env.REACT_APP_DVRHEALTH_API_URL}/networkreportworking?page=${page}`;\r\n\r\n        if (searchTerm) {\r\n            apiUrl += `&ATMID=${searchTerm}`;\r\n        }\r\n\r\n        console.log('Search Term (ATMID):', searchTerm); \r\n\r\n        axios\r\n            .get(apiUrl)\r\n            .then((response) => {\r\n                console.log('API Response for Page', page, ':', response.data);\r\n                const responseData = response.data.data || [];\r\n                setPost(responseData);\r\n                setTotalCount(response.data.totalCount || 0);\r\n            })\r\n            .catch((error) => {\r\n                console.error('API Error:', error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleBackspace = (e) => {\r\n            if (e.key === 'Backspace' && searchTerm === '') {\r\n                fetchAllSitesData(number, '');\r\n            }\r\n        };\r\n        window.addEventListener('keydown', handleBackspace);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleBackspace);\r\n        };\r\n    }, [searchTerm]);\r\n\r\n    const handlePageClick = (selected) => {\r\n        const newPageNumber = selected.selected + 1;\r\n        setNumber(newPageNumber);\r\n        fetchAllSitesData(newPageNumber, searchTerm);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/ExportNetworkReport`);\r\n                setData(response.data.data);\r\n            } catch (error) {\r\n                console.error('Error fetching data from API:', error);\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const exportToExcel = () => {\r\n        const ws = XLSX.utils.json_to_sheet(data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'DVR Health Data');\r\n        XLSX.writeFile(wb, 'NetWorkWorkingReport.xlsx');\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {loading && (\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader\"></div>\r\n                </div>\r\n            )}\r\n\r\n            {!loading && post.length > 0 && (\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 pt-2\">\r\n                            <h6>Network Working Report</h6>\r\n                            <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                                Export to Excel\r\n                            </button>\r\n\r\n                        </div>\r\n                        <div className=\"col-6 d-flex justify-content-end\">\r\n                            <div className='col-4 text-end login-form2'>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={searchTerm}\r\n                                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                                    onKeyUp={(e) => {\r\n                                        if (e.key === 'Enter') {\r\n                                            fetchAllSitesData(number, e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    placeholder='search atmid'\r\n                                    className='form-control'\r\n\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Table striped bordered hover className='custom-table mt-4'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Sr No</th>\r\n                                <th>ATM ID</th>\r\n                                <th>Bank</th>\r\n                                <th>Rec Time</th>\r\n                                <th>Http Port</th>\r\n                                <th>Rtsp Port</th>\r\n                                <th>Router Port</th>\r\n                                <th>SDK Port</th>\r\n                                <th>AI Port</th>\r\n\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {post.map((users, index) => (\r\n                                <tr>\r\n                                    <td>{index + 1}</td>\r\n                                    <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '13px' }}>\r\n                                        {users.ATMID}\r\n                                    </td>\r\n                                    <td style={{ color: 'teal', fontWeight: 600, fontSize: '13px' }}>{users.Bank}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.rectime}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.http_port}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}> {users.rtsp_port}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.router_port}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.sdk_port}</td>\r\n                                    <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.ai_port}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                    <ReactPaginate\r\n                        previousLabel={'<'}\r\n                        nextLabel={'>'}\r\n                        pageCount={Math.ceil(totalCount / postPerPage)}\r\n                        onPageChange={handlePageClick}\r\n                        containerClassName={'paginationBttns'}\r\n                        activeClassName={'paginationActive'}\r\n                        disableInitialCallback={true}\r\n                        initialPage={number - 1}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NetworkWorking;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\ComfortPanel.js",["316","317","318","319"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\n\r\n\r\nconst ComfortPanel = () => {\r\n    const [post, setPost] = useState([]);\r\n    const [number, setNumber] = useState(1);\r\n    const [postPerPage] = useState(50);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [searchTermEntered, setSearchTermEntered] = useState('');\r\n    const [data, setData] = useState([])\r\n    const [loading, setLoading] = useState(true);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n\r\n    const [updatedRecords, setUpdatedRecords] = useState(\"\")\r\n\r\n\r\n\r\n    const [numberData, setNumberData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch('http://103.141.218.26:8080/Hitachi/api/get_panel_health_pnb_cts_data.php', {\r\n                    mode: 'no-cors' // Add no-cors mode here\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const textData = await response.text();\r\n                // Assume textData is just a number in string format\r\n                const number = parseFloat(textData); // Convert text to number\r\n                setNumberData(number);\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n\r\n    const fetchUpdatedData = async () => {\r\n        try {\r\n            const response = await fetch('http://103.141.218.26:8080/Hitachi/api/get_panel_health_pnb_cts_data.php', {\r\n                mode: 'no-cors'\r\n            });\r\n            const result = await response.text();\r\n\r\n            console.log(response)\r\n            setUpdatedRecords(result);\r\n            console.log(result)\r\n        } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n        }\r\n    };\r\n\r\n    // const fetchUpdatedData = async () => {\r\n    //     try {\r\n    //         const response = await fetch('http://103.141.218.26:8080/Hitachi/api/get_panel_health_pnb_cts_data.php');\r\n    //         const result = await response.json();\r\n    //         setUpdatedRecords(result);\r\n    //         console.log(result);\r\n    //     } catch (error) {\r\n    //         console.error('Error fetching data:', error);\r\n    //     }\r\n    // };\r\n\r\n\r\n\r\n\r\n    const firstPost = (number - 1) * postPerPage;\r\n    const lastPost = Math.min(firstPost + postPerPage, totalCount);\r\n\r\n    useEffect(() => {\r\n        fetchAllSitesData(number, searchTermEntered);\r\n    }, [number, searchTermEntered]);\r\n\r\n    const fetchAllSitesData = (page) => {\r\n        setLoading(true);\r\n\r\n        let apiUrl = `${process.env.REACT_APP_DVRHEALTH_API_URL}/PanelHealthDetailsapid?page=${page}`;\r\n\r\n        if (searchTerm) {\r\n            apiUrl += `&atmid=${searchTerm}`;\r\n        }\r\n        axios\r\n            .get(apiUrl)\r\n            .then((response) => {\r\n                // console.log('API Response for Page', page, ':', response.data);\r\n                const responseData = response.data.data || [];\r\n                setPost(responseData);\r\n                // console.log(responseData)\r\n                setTotalCount(response.data.totalCount || 0);\r\n            })\r\n            .catch((error) => {\r\n                console.error('API Error:', error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleBackspace = (e) => {\r\n            if (e.key === 'Backspace' && searchTerm === '') {\r\n                fetchAllSitesData(number, '');\r\n            }\r\n        };\r\n        window.addEventListener('keydown', handleBackspace);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleBackspace);\r\n        };\r\n    }, [searchTerm]);\r\n\r\n    const handlePageClick = (selected) => {\r\n        const newPageNumber = selected.selected + 1;\r\n        setNumber(newPageNumber);\r\n        fetchAllSitesData(newPageNumber, searchTerm);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/ExportPanelHealthDetails`);\r\n                setData(response.data.data);\r\n            } catch (error) {\r\n                console.error('Error fetching data from API:', error);\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const exportToExcel = () => {\r\n        const ws = XLSX.utils.json_to_sheet(data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'DVR Health Data');\r\n        XLSX.writeFile(wb, 'Online_Sites.xlsx');\r\n    };\r\n\r\n    const renderZoneDetails = (zoneConfig) => {\r\n        const cells = [];\r\n\r\n        const getZoneStatus = (zone) => {\r\n            let statusText = 'Unknown';\r\n            let statusColor = 'gray';\r\n\r\n            if (zone.zone_no === 37) {\r\n                switch (zone.status) {\r\n                    case 0:\r\n                        statusText = 'Normal';\r\n                        statusColor = 'blue';\r\n                        break;\r\n                    case 1:\r\n                        statusText = 'Triggered';\r\n                        statusColor = 'red';\r\n                        break;\r\n                    case 2:\r\n                        statusText = 'Short';\r\n                        statusColor = 'yellow';\r\n                        break;\r\n                    case 3:\r\n                        statusText = 'Open';\r\n                        statusColor = 'green';\r\n                        break;\r\n                    default:\r\n                        statusText = 'Unknown';\r\n                        statusColor = 'gray';\r\n                        break;\r\n                }\r\n            } else {\r\n                statusText = zone.armed === 1 ? 'Active/' : 'Bypassed/';\r\n                statusText += zone.arm_status === 1 ? 'Armed/' : 'Disarmed/';\r\n                statusText += zone.enabled === 0 ? 'Zone Disabled' : 'Zone Enabled';\r\n                statusColor = getStatusColor(zone);\r\n            }\r\n\r\n            return { statusText, statusColor };\r\n        };\r\n\r\n        const getStatusColor = (zone) => {\r\n            if (zone.armed === 1) {\r\n                return 'green';\r\n            } else if (zone.armed === 0) {\r\n                return 'red';\r\n            }\r\n            return 'gray';\r\n        };\r\n\r\n        for (let zoneIndex = 0; zoneIndex < zoneConfig.length; zoneIndex++) {\r\n            const zone = zoneConfig[zoneIndex];\r\n            const { statusText, statusColor } = getZoneStatus(zone);\r\n\r\n            cells.push(\r\n                <td key={zoneIndex}>\r\n                    <span style={{ color: statusColor, fontWeight: 'bold', fontSize: '13px' }}>\r\n                        {statusText}\r\n                    </span>\r\n                </td>\r\n            );\r\n        }\r\n\r\n        return cells;\r\n    };\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                console.log(numberData)\r\n            }\r\n            {loading && (\r\n                <div className=\"loader-container\">\r\n                    <div className=\"loader\"></div>\r\n                </div>\r\n            )}\r\n            {!loading && post.length > 0 && (\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 pt-2\">\r\n                            <h6>Comfort Panel</h6>\r\n                            <button onClick={exportToExcel} className=\"btn btn-primary mt-3\">\r\n                                Export to Excel\r\n                            </button>\r\n  \r\n                            <button className='btn btn-success ml-3 pt-2' onClick={fetchUpdatedData}>Fetch Data</button>\r\n                        </div>\r\n                        <div className=\"col-6 d-flex justify-content-end\">\r\n                            <div className='col-4 text-end login-form2'>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={searchTerm}\r\n                                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                                    onKeyUp={(e) => {\r\n                                        if (e.key === 'Enter') {\r\n                                            fetchAllSitesData(number, e.target.value);\r\n                                        }\r\n                                    }}\r\n                                    placeholder='search atmid'\r\n                                    className='form-control'\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {updatedRecords ? updatedRecords : 'No Records'}\r\n                    {/* {updatedRecords !== null && (\r\n                        <p>{updatedRecords} hrllo</p>\r\n                    )} */}\r\n                    <div style={{ overflowY: 'auto', scrollbarWidth: 'thin' }}>\r\n                        <Table className='custom-tablepanel mt-4'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Sr No</th>\r\n                                    <th>ATM ID</th>\r\n                                    <th>Panel Name</th>\r\n                                    {post.length > 0 && Array.isArray(post[0].zone_config) ? (\r\n                                        post[0].zone_config.map((zone, zoneIndex) => (\r\n                                            <th key={zoneIndex}>{zone.zone_name}</th>\r\n                                        ))\r\n                                    ) : (\r\n                                        <th>No Zone Data</th>\r\n                                    )}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {post.map((users, index) => (\r\n                                    <tr key={index}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '13px' }}>{users.atmid}</td>\r\n                                        <td style={{ color: 'orange', fontWeight: 'bold', fontSize: '13px' }}>{users.panel_name}</td>\r\n                                        {users.zone_config && Array.isArray(users.zone_config) ? (\r\n                                            renderZoneDetails(users.zone_config)\r\n                                        ) : (\r\n                                            <td>No Zone Data</td>\r\n                                        )}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n\r\n\r\n                        </Table>\r\n\r\n                        <ReactPaginate\r\n                            previousLabel={'<'}\r\n                            nextLabel={'>'}\r\n                            pageCount={Math.ceil(totalCount / postPerPage)}\r\n                            onPageChange={handlePageClick}\r\n                            containerClassName={'paginationBttns'}\r\n                            activeClassName={'paginationActive'}\r\n                            disableInitialCallback={true}\r\n                            initialPage={number - 1}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComfortPanel;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\LatestPanelHealthData.js",["320"],[],"// DataPage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Table } from 'react-bootstrap';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nconst LatestPanelHealthData = () => {\r\n  const [data, setData] = useState([]);\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n  const perPage = 50;\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [pageNumber]);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(`http://103.141.218.26:8080/Hitachi/api/get_panel_health_pnb_cts_data.php?page=${pageNumber + 1}`);\r\n      setData(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const displayData = data.slice(0, perPage);\r\n\r\n  const pageCount = Math.ceil(data.length / perPage);\r\n\r\n  const handlePageClick = ({ selected }) => {\r\n    setPageNumber(selected);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Table className='custom-tablepanel mt-4'>\r\n        <thead>\r\n          <tr>\r\n            <th>Column 1</th>\r\n            <th>Column 2</th>\r\n            <th>Column 3</th>\r\n            <th>Column 4</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {displayData.map((item, index) => (\r\n            <tr key={index}>\r\n              {/* Render your table rows here */}\r\n              <td>{item.column1}</td>\r\n              <td>{item.column2}</td>\r\n              <td>{item.column3}</td>\r\n              <td>{item.column4}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n\r\n      <ReactPaginate\r\n        pageCount={pageCount}\r\n        onPageChange={handlePageClick}\r\n        containerClassName={'pagination'}\r\n        activeClassName={'active'}\r\n      />\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LatestPanelHealthData;\r\n","C:\\wamp64\\www\\cms_comfort\\24server\\dvrhealth\\src\\Pages\\SiteTableTwo.js",["321","322"],[],"\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Pagination from 'react-bootstrap/Pagination';\r\nimport { FiArrowUp, FiArrowDown } from 'react-icons/fi'\r\nimport { Link } from 'react-router-dom';\r\nimport { BsRouter } from 'react-icons/bs'\r\nimport { LiaInternetExplorer } from 'react-icons/lia'\r\nimport { TbSdk } from 'react-icons/tb'\r\nimport { BiSolidVideoRecording } from 'react-icons/bi'\r\nimport { FaRaspberryPi } from 'react-icons/fa'\r\nimport { Table } from 'react-bootstrap';\r\n\r\nconst DvrData = () => {\r\n  const [data, setData] = useState([]);\r\n  const [atmid, setAtmid] = useState('');\r\n  const [totalRecords, setTotalRecords] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const itemsPerPage = 20;\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [currentPage, atmid]);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(`${process.env.REACT_APP_DVRHEALTH_API_URL}/api/data`, {\r\n        params: { limit: itemsPerPage, offset: (currentPage - 1) * itemsPerPage, atmid },\r\n      });\r\n\r\n      setData(response.data.data);\r\n      setTotalRecords(response.data.totalCount);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    setCurrentPage(1);\r\n    fetchData();\r\n  };\r\n\r\n  const handlePagination = (newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  const renderPagination = () => {\r\n    const pageCount = Math.ceil(totalRecords / itemsPerPage);\r\n\r\n    if (pageCount <= 1) {\r\n      return null;\r\n    }\r\n\r\n    const renderEllipsis = (key) => (\r\n      <Pagination.Ellipsis key={key} disabled />\r\n    );\r\n\r\n    const renderPageItem = (pageNumber, key) => (\r\n      <Pagination.Item\r\n        key={key}\r\n        active={currentPage === pageNumber}\r\n        onClick={() => handlePagination(pageNumber)}\r\n      >\r\n        {pageNumber}\r\n      </Pagination.Item>\r\n    );\r\n\r\n    const renderPaginationItems = () => {\r\n      const pageItems = [];\r\n\r\n    \r\n      const maxPagesToShow = 5;\r\n      const startPage = Math.max(1, currentPage - maxPagesToShow);\r\n      const endPage = Math.min(pageCount, currentPage + maxPagesToShow);\r\n\r\n      for (let i = startPage; i <= endPage; i++) {\r\n        pageItems.push(renderPageItem(i, i));\r\n      }\r\n\r\n      return pageItems;\r\n    };\r\n\r\n    return (\r\n      <Pagination>\r\n        {currentPage > 3 && renderEllipsis('start')}\r\n        {renderPaginationItems()}\r\n        {currentPage < pageCount - 2 && renderEllipsis('end')}\r\n      </Pagination>\r\n    );\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search by ATMID\"\r\n          value={atmid}\r\n          onChange={(e) => setAtmid(e.target.value)}\r\n        />\r\n        <button onClick={handleSearch}>Search</button>\r\n      </div>\r\n      <div style={{ overflowY: 'auto', scrollbarWidth: 'thin' }}>\r\n        <Table className='custom-tablepanel mt-4'>\r\n          <thead>\r\n            <tr>\r\n              <th>Sr No</th>\r\n              <th>ATM ID</th>\r\n              <th>Bank</th>\r\n              <th>\r\n                Up/Down\r\n              </th>\r\n              <th>Device Time</th>\r\n              <th>City</th>\r\n              <th>State</th>\r\n              <th>Zone</th>\r\n              <th>HDD Status</th>\r\n              <th>Last Communication</th>\r\n              <th>Router Ip</th>\r\n              <th>Dvr type</th>\r\n              <th>HTTP Port</th>\r\n              <th>RTSP Port</th>\r\n              <th>Router Port</th>\r\n              <th>SDK Port</th>\r\n              <th>AI Port</th>\r\n              <th>Camera Status</th>\r\n              <th>Rec From</th>\r\n              <th>Rec To</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.map((users, index) => (\r\n              <tr key={users.atmid}>\r\n                <td>{index + 1}</td>\r\n                <td style={{ color: 'darkblue', fontWeight: 'bold', fontSize: '13px' }}>\r\n                  <Link\r\n                    to={`/admin/DeviceHistory/${users.atmid}`}\r\n                    style={{\r\n                      textDecoration: 'none',\r\n                      color: 'darkblue',\r\n                      fontWeight: 'bold',\r\n                      fontSize: '15px',\r\n                    }}\r\n                  >\r\n                    {users.atmid}\r\n                  </Link>\r\n                </td>\r\n                <td style={{ color: 'teal', fontWeight: 600, fontSize: '13px' }}>{users.Bank}</td>\r\n                <td>\r\n                  {users.login_status === 'working' ? (\r\n                    <FiArrowUp style={{ color: 'green', fontWeight: 600, fontSize: '18px' }} />\r\n                  ) : (\r\n                    <FiArrowDown style={{ color: 'red', fontWeight: 600, fontSize: '18px' }} />\r\n                  )}\r\n                </td>\r\n                <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.cdate}</td>\r\n                <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.City}</td>\r\n                <td style={{ fontWeight: 600, fontSize: '13px' }}> {users.State}</td>\r\n                <td style={{ fontWeight: 600, fontSize: '13px' }}>{users.Zone}</td>\r\n                <td style={{ color: users.hdd_status === 'working' ? 'green' : 'red', fontWeight: 'bold', fontSize: '14px' }}>\r\n                  {users.hdd_status}\r\n                </td>\r\n                <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.last_communication}</td>\r\n                <td style={{ color: 'skyblue', fontWeight: 'bold', fontSize: '13px' }}>{users.ip}</td>\r\n                <td style={{ color: '#9C4CFF', fontWeight: 600, fontSize: '13px' }}>{users.dvrtype}</td>\r\n                <td style={{ fontWeight: 600, color: (users.http_port_status === 'Y') ? 'green' : (users.http_port_status === 'O') ? 'orange' : 'red' }}>\r\n                  {users.http_port_status === 'Y' ? <LiaInternetExplorer size={22} color=\"green\" /> : (users.http_port_status === 'O') ? <LiaInternetExplorer size={22} color=\"orange\" /> : <LiaInternetExplorer size={22} color=\"red\" />}\r\n                </td>\r\n                <td style={{ fontWeight: 700, color: (users.rtsp_port_status === 'Y') ? 'green' : (users.rtsp_port_status === 'O') ? 'orange' : 'red' }}>\r\n                  {users.rtsp_port_status === 'Y' ? <BiSolidVideoRecording size={20} color=\"green\" /> : (users.rtsp_port_status === 'O') ? <BiSolidVideoRecording size={20} color=\"orange\" /> : <BiSolidVideoRecording size={20} color=\"red\" />}\r\n                </td>\r\n                <td style={{ fontWeight: 700, color: (users.router_port_status === 'Y') ? 'green' : (users.router_port_status === 'O') ? 'orange' : 'red' }}>\r\n                  {users.router_port_status === 'Y' ? <BsRouter size={20} color=\"green\" /> : (users.router_port_status === 'O') ? <BsRouter size={20} color=\"orange\" /> : <BsRouter size={20} color=\"red\" />}\r\n                </td>\r\n                <td style={{ fontWeight: 700, color: (users.sdk_port_status === 'Y') ? 'green' : (users.sdk_port_status === 'O') ? 'orange' : 'red' }}>\r\n                  {users.sdk_port_status === 'Y' ? <TbSdk size={20} color=\"green\" /> : (users.sdk_port_status === 'O') ? <TbSdk size={20} color=\"orange\" /> : <TbSdk size={20} color=\"red\" />}\r\n                </td>\r\n                <td style={{ fontWeight: 700, color: (users.ai_port_status === 'Y') ? 'green' : (users.ai_port_status === 'O') ? 'orange' : 'red', fontWeight: 600, fontSize: '13px' }}>\r\n                  {users.ai_port_status === 'Y' ? <FaRaspberryPi size={20} color=\"green\" /> : (users.ai_port_status === 'O') ? <FaRaspberryPi size={20} color=\"orange\" /> : <FaRaspberryPi size={20} color=\"red\" />}\r\n                </td>\r\n                <td>\r\n                  <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                    <div\r\n                      style={{\r\n                        width: '13px',\r\n                        height: '13px',\r\n                        borderRadius: \"17px\",\r\n                        backgroundColor: users.cam1 === 'working' ? 'green' : 'red',\r\n                        marginRight: '5px',\r\n                        paddingTop: \"5px\"\r\n                      }}\r\n                    ></div>\r\n                    <div\r\n                      style={{\r\n                        width: '13px',\r\n                        height: '13px',\r\n                        borderRadius: \"17px\",\r\n                        backgroundColor: users.cam2 === 'working' ? 'green' : 'red',\r\n                        marginRight: '5px',\r\n                        paddingTop: \"5px\"\r\n                      }}\r\n                    ></div>\r\n                    <div\r\n                      style={{\r\n                        width: '13px',\r\n                        height: '13px',\r\n                        borderRadius: \"17px\",\r\n                        backgroundColor: users.cam3 === 'working' ? 'green' : 'red',\r\n                        marginRight: '5px',\r\n                        paddingTop: \"5px\"\r\n                      }}\r\n                    ></div>\r\n                    <div\r\n                      style={{\r\n                        width: '13px',\r\n                        height: '13px',\r\n                        borderRadius: \"17px\",\r\n                        backgroundColor: users.cam4 === 'working' ? 'green' : 'red',\r\n                        paddingTop: \"5px\"\r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                </td>\r\n                <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.recording_from}</td>\r\n                <td style={{ color: 'maroon', fontWeight: 600, fontSize: '13px' }}>{users.recording_to}</td>\r\n\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n\r\n        {renderPagination()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DvrData;\r\n",{"ruleId":"323","replacedBy":"324"},{"ruleId":"325","severity":1,"message":"326","line":5,"column":27,"nodeType":"327","messageId":"328","endLine":5,"endColumn":33},{"ruleId":"329","severity":1,"message":"330","line":207,"column":33,"nodeType":"331","endLine":207,"endColumn":100},{"ruleId":"325","severity":1,"message":"332","line":6,"column":10,"nodeType":"327","messageId":"328","endLine":6,"endColumn":19},{"ruleId":"325","severity":1,"message":"333","line":6,"column":21,"nodeType":"327","messageId":"328","endLine":6,"endColumn":32},{"ruleId":"325","severity":1,"message":"334","line":13,"column":31,"nodeType":"327","messageId":"328","endLine":13,"endColumn":51},{"ruleId":"325","severity":1,"message":"335","line":19,"column":11,"nodeType":"327","messageId":"328","endLine":19,"endColumn":19},{"ruleId":"336","severity":1,"message":"337","line":23,"column":8,"nodeType":"338","endLine":23,"endColumn":35,"suggestions":"339"},{"ruleId":"336","severity":1,"message":"340","line":60,"column":8,"nodeType":"338","endLine":60,"endColumn":20,"suggestions":"341"},{"ruleId":"325","severity":1,"message":"334","line":13,"column":31,"nodeType":"327","messageId":"328","endLine":13,"endColumn":51},{"ruleId":"325","severity":1,"message":"335","line":19,"column":11,"nodeType":"327","messageId":"328","endLine":19,"endColumn":19},{"ruleId":"336","severity":1,"message":"337","line":23,"column":8,"nodeType":"338","endLine":23,"endColumn":35,"suggestions":"342"},{"ruleId":"336","severity":1,"message":"340","line":60,"column":8,"nodeType":"338","endLine":60,"endColumn":20,"suggestions":"343"},{"ruleId":"325","severity":1,"message":"334","line":14,"column":31,"nodeType":"327","messageId":"328","endLine":14,"endColumn":51},{"ruleId":"325","severity":1,"message":"335","line":20,"column":11,"nodeType":"327","messageId":"328","endLine":20,"endColumn":19},{"ruleId":"336","severity":1,"message":"337","line":24,"column":8,"nodeType":"338","endLine":24,"endColumn":35,"suggestions":"344"},{"ruleId":"336","severity":1,"message":"340","line":61,"column":8,"nodeType":"338","endLine":61,"endColumn":20,"suggestions":"345"},{"ruleId":"325","severity":1,"message":"346","line":12,"column":25,"nodeType":"327","messageId":"328","endLine":12,"endColumn":39},{"ruleId":"325","severity":1,"message":"346","line":12,"column":25,"nodeType":"327","messageId":"328","endLine":12,"endColumn":39},{"ruleId":"347","severity":1,"message":"348","line":56,"column":144,"nodeType":"349","messageId":"350","endLine":56,"endColumn":154},{"ruleId":"325","severity":1,"message":"346","line":12,"column":25,"nodeType":"327","messageId":"328","endLine":12,"endColumn":39},{"ruleId":"325","severity":1,"message":"346","line":12,"column":25,"nodeType":"327","messageId":"328","endLine":12,"endColumn":39},{"ruleId":"325","severity":1,"message":"346","line":12,"column":25,"nodeType":"327","messageId":"328","endLine":12,"endColumn":39},{"ruleId":"325","severity":1,"message":"346","line":12,"column":25,"nodeType":"327","messageId":"328","endLine":12,"endColumn":39},{"ruleId":"325","severity":1,"message":"346","line":12,"column":25,"nodeType":"327","messageId":"328","endLine":12,"endColumn":39},{"ruleId":"325","severity":1,"message":"346","line":13,"column":25,"nodeType":"327","messageId":"328","endLine":13,"endColumn":39},{"ruleId":"325","severity":1,"message":"334","line":13,"column":31,"nodeType":"327","messageId":"328","endLine":13,"endColumn":51},{"ruleId":"325","severity":1,"message":"335","line":19,"column":11,"nodeType":"327","messageId":"328","endLine":19,"endColumn":19},{"ruleId":"336","severity":1,"message":"337","line":23,"column":8,"nodeType":"338","endLine":23,"endColumn":35,"suggestions":"351"},{"ruleId":"336","severity":1,"message":"340","line":60,"column":8,"nodeType":"338","endLine":60,"endColumn":20,"suggestions":"352"},{"ruleId":"325","severity":1,"message":"353","line":15,"column":14,"nodeType":"327","messageId":"328","endLine":15,"endColumn":24},{"ruleId":"325","severity":1,"message":"346","line":12,"column":25,"nodeType":"327","messageId":"328","endLine":12,"endColumn":39},{"ruleId":"325","severity":1,"message":"334","line":13,"column":31,"nodeType":"327","messageId":"328","endLine":13,"endColumn":51},{"ruleId":"325","severity":1,"message":"335","line":18,"column":11,"nodeType":"327","messageId":"328","endLine":18,"endColumn":19},{"ruleId":"336","severity":1,"message":"337","line":22,"column":8,"nodeType":"338","endLine":22,"endColumn":35,"suggestions":"354"},{"ruleId":"336","severity":1,"message":"340","line":59,"column":8,"nodeType":"338","endLine":59,"endColumn":20,"suggestions":"355"},{"ruleId":"325","severity":1,"message":"334","line":13,"column":29,"nodeType":"327","messageId":"328","endLine":13,"endColumn":49},{"ruleId":"325","severity":1,"message":"335","line":20,"column":9,"nodeType":"327","messageId":"328","endLine":20,"endColumn":17},{"ruleId":"336","severity":1,"message":"337","line":24,"column":6,"nodeType":"338","endLine":24,"endColumn":33,"suggestions":"356"},{"ruleId":"336","severity":1,"message":"340","line":61,"column":6,"nodeType":"338","endLine":61,"endColumn":18,"suggestions":"357"},{"ruleId":"325","severity":1,"message":"334","line":13,"column":31,"nodeType":"327","messageId":"328","endLine":13,"endColumn":51},{"ruleId":"325","severity":1,"message":"358","line":14,"column":18,"nodeType":"327","messageId":"328","endLine":14,"endColumn":25},{"ruleId":"325","severity":1,"message":"359","line":15,"column":12,"nodeType":"327","messageId":"328","endLine":15,"endColumn":19},{"ruleId":"325","severity":1,"message":"335","line":19,"column":11,"nodeType":"327","messageId":"328","endLine":19,"endColumn":19},{"ruleId":"336","severity":1,"message":"337","line":23,"column":8,"nodeType":"338","endLine":23,"endColumn":35,"suggestions":"360"},{"ruleId":"336","severity":1,"message":"340","line":60,"column":8,"nodeType":"338","endLine":60,"endColumn":20,"suggestions":"361"},{"ruleId":"325","severity":1,"message":"334","line":13,"column":31,"nodeType":"327","messageId":"328","endLine":13,"endColumn":51},{"ruleId":"325","severity":1,"message":"335","line":19,"column":11,"nodeType":"327","messageId":"328","endLine":19,"endColumn":19},{"ruleId":"336","severity":1,"message":"337","line":23,"column":8,"nodeType":"338","endLine":23,"endColumn":35,"suggestions":"362"},{"ruleId":"336","severity":1,"message":"340","line":62,"column":8,"nodeType":"338","endLine":62,"endColumn":20,"suggestions":"363"},{"ruleId":"325","severity":1,"message":"334","line":13,"column":31,"nodeType":"327","messageId":"328","endLine":13,"endColumn":51},{"ruleId":"325","severity":1,"message":"335","line":19,"column":11,"nodeType":"327","messageId":"328","endLine":19,"endColumn":19},{"ruleId":"336","severity":1,"message":"337","line":23,"column":8,"nodeType":"338","endLine":23,"endColumn":35,"suggestions":"364"},{"ruleId":"336","severity":1,"message":"340","line":60,"column":8,"nodeType":"338","endLine":60,"endColumn":20,"suggestions":"365"},{"ruleId":"366","severity":1,"message":"367","line":33,"column":5,"nodeType":"368","messageId":"369","endLine":33,"endColumn":37},{"ruleId":"325","severity":1,"message":"332","line":6,"column":10,"nodeType":"327","messageId":"328","endLine":6,"endColumn":19},{"ruleId":"325","severity":1,"message":"333","line":6,"column":21,"nodeType":"327","messageId":"328","endLine":6,"endColumn":32},{"ruleId":"325","severity":1,"message":"334","line":13,"column":31,"nodeType":"327","messageId":"328","endLine":13,"endColumn":51},{"ruleId":"325","severity":1,"message":"335","line":19,"column":11,"nodeType":"327","messageId":"328","endLine":19,"endColumn":19},{"ruleId":"336","severity":1,"message":"337","line":23,"column":8,"nodeType":"338","endLine":23,"endColumn":35,"suggestions":"370"},{"ruleId":"336","severity":1,"message":"340","line":61,"column":8,"nodeType":"338","endLine":61,"endColumn":20,"suggestions":"371"},{"ruleId":"325","severity":1,"message":"334","line":13,"column":31,"nodeType":"327","messageId":"328","endLine":13,"endColumn":51},{"ruleId":"325","severity":1,"message":"335","line":19,"column":11,"nodeType":"327","messageId":"328","endLine":19,"endColumn":19},{"ruleId":"336","severity":1,"message":"337","line":23,"column":8,"nodeType":"338","endLine":23,"endColumn":35,"suggestions":"372"},{"ruleId":"336","severity":1,"message":"340","line":62,"column":8,"nodeType":"338","endLine":62,"endColumn":20,"suggestions":"373"},{"ruleId":"325","severity":1,"message":"334","line":13,"column":31,"nodeType":"327","messageId":"328","endLine":13,"endColumn":51},{"ruleId":"325","severity":1,"message":"335","line":76,"column":11,"nodeType":"327","messageId":"328","endLine":76,"endColumn":19},{"ruleId":"336","severity":1,"message":"337","line":80,"column":8,"nodeType":"338","endLine":80,"endColumn":35,"suggestions":"374"},{"ruleId":"336","severity":1,"message":"340","line":117,"column":8,"nodeType":"338","endLine":117,"endColumn":20,"suggestions":"375"},{"ruleId":"336","severity":1,"message":"376","line":14,"column":6,"nodeType":"338","endLine":14,"endColumn":18,"suggestions":"377"},{"ruleId":"336","severity":1,"message":"376","line":23,"column":6,"nodeType":"338","endLine":23,"endColumn":26,"suggestions":"378"},{"ruleId":"347","severity":1,"message":"348","line":180,"column":148,"nodeType":"349","messageId":"350","endLine":180,"endColumn":158},"no-new-object",["379"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'FiArrowUp' is defined but never used.","'FiArrowDown' is defined but never used.","'setSearchTermEntered' is assigned a value but never used.","'lastPost' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchAllSitesData'. Either include it or remove the dependency array.","ArrayExpression",["380"],"React Hook useEffect has missing dependencies: 'fetchAllSitesData' and 'number'. Either include them or remove the dependency array.",["381"],["382"],["383"],["384"],["385"],"'setSearchQuery' is assigned a value but never used.","no-dupe-keys","Duplicate key 'fontWeight'.","ObjectExpression","unexpected",["386"],["387"],"'formatDate' is defined but never used.",["388"],["389"],["390"],["391"],"'setData' is assigned a value but never used.","'loading' is assigned a value but never used.",["392"],["393"],["394"],["395"],["396"],["397"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["398"],["399"],["400"],["401"],["402"],["403"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["404"],["405"],"no-object-constructor",{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"406","fix":"410"},{"desc":"408","fix":"411"},{"desc":"406","fix":"412"},{"desc":"408","fix":"413"},{"desc":"406","fix":"414"},{"desc":"408","fix":"415"},{"desc":"406","fix":"416"},{"desc":"408","fix":"417"},{"desc":"406","fix":"418"},{"desc":"408","fix":"419"},{"desc":"406","fix":"420"},{"desc":"408","fix":"421"},{"desc":"406","fix":"422"},{"desc":"408","fix":"423"},{"desc":"406","fix":"424"},{"desc":"408","fix":"425"},{"desc":"406","fix":"426"},{"desc":"408","fix":"427"},{"desc":"406","fix":"428"},{"desc":"408","fix":"429"},{"desc":"406","fix":"430"},{"desc":"408","fix":"431"},{"desc":"432","fix":"433"},{"desc":"434","fix":"435"},"Update the dependencies array to be: [fetchAllSitesData, number, searchTermEntered]",{"range":"436","text":"437"},"Update the dependencies array to be: [fetchAllSitesData, number, searchTerm]",{"range":"438","text":"439"},{"range":"440","text":"437"},{"range":"441","text":"439"},{"range":"442","text":"437"},{"range":"443","text":"439"},{"range":"444","text":"437"},{"range":"445","text":"439"},{"range":"446","text":"437"},{"range":"447","text":"439"},{"range":"448","text":"437"},{"range":"449","text":"439"},{"range":"450","text":"437"},{"range":"451","text":"439"},{"range":"452","text":"437"},{"range":"453","text":"439"},{"range":"454","text":"437"},{"range":"455","text":"439"},{"range":"456","text":"437"},{"range":"457","text":"439"},{"range":"458","text":"437"},{"range":"459","text":"439"},{"range":"460","text":"437"},{"range":"461","text":"439"},"Update the dependencies array to be: [fetchData, pageNumber]",{"range":"462","text":"463"},"Update the dependencies array to be: [currentPage, atmid, fetchData]",{"range":"464","text":"465"},[897,924],"[fetchAllSitesData, number, searchTermEntered]",[2101,2113],"[fetchAllSitesData, number, searchTerm]",[902,929],[2107,2119],[886,913],[2089,2101],[903,930],[2109,2121],[900,927],[2110,2122],[873,900],[1912,1924],[843,870],[2049,2061],[838,865],[2093,2105],[849,876],[2053,2065],[904,931],[2150,2162],[846,873],[2115,2127],[2737,2764],[3994,4006],[387,399],"[fetchData, pageNumber]",[815,835],"[currentPage, atmid, fetchData]"]